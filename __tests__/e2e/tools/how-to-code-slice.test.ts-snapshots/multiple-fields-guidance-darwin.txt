{
  "content": [
    {
      "type": "text",
      "text": "# Prismic Slice Implementation Guide\n\n## Required Steps\n1. **Analyze model.json** at model.json\n   - Create field analysis table: Field | Type | Config | Implementation\n   - Use exact model configuration, not assumptions\n\n2. **Follow project patterns**\n   - Framework: nuxt\n   - Styling: Match existing slices if available, otherwise use project's styling system\n   - Code: Analyze codebase for consistent patterns and conventions\n\n3. **Implement fields dynamically**\n   - All content must come from Prismic fields\n   - Never hardcode visible content\n   - Use appropriate components for each field type based on the following field documentation\n\n## Field Documentation\n### prismic.RichTextField\n---\ntitle: \"Rich Text\"\ndescription: \"This article explains what the rich text field is and how to configure it.\"\nmeta_title: \"Rich Text\"\ncategory: \"fields\"\n---\n\nThe rich text field allows content writers to write formatted content, including paragraphs, headings, lists, and more.\n\n> The [text field](https://prismic.io/docs/fields/text.md) and rich text field look similar. Use the text field for simple text that does not need formatting. Use the rich text field for text that requires formatting.\n\n# Add a rich text field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a rich text field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **rich text** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Allow target blank for links** checkbox determines if a content writer can configure links to open in a new window.\n\n   The **Allow multiple paragraphs** checkbox determines if a content writer can write multiple blocks of content.\n\n3. **(Optional) Allow a subset of formatting options**\n\n   By default, rich text fields support all formatting options. In some cases, you may want to restrict formatting options, such as only allowing H1, H2, and H3 headings.\n\n   Open the field settings and enable or disable formatting options under the **Accept** section.\n\n# Use labels for custom formatting\n\nRich text fields support standard text formatting options, like bold and emphasized text. If the formatting you need is not supported, add custom formatting options using **labels**.\n\nContent writers can select text and apply a label. In your website's code, you can read the label and apply custom formatting by, for example, adding a custom CSS class.\n\nYou can register as many labels as needed.\n\n## How to add a label to a rich text field\n\nUnlike other rich text options, labels cannot be configured through [Slice Machine](https://prismic.io/docs/slice-machine.md). Instead, they must be added by editing your content model's JSON file.\n\n1. **Open your content model's JSON file**\n\n   In your Prismic project, open the slice, page type, or custom type JSON file you want to modify. The file location depends on the content type:\n\n   * **Slices**: Typically in `src/slices/<name>/model.json`.\n   * **Page types**: `customtypes/<name>/index.json`.\n   * **Custom types**: `customtypes/<name>/index.json`.\n\n2. **Add a label**\n\n   Add a `labels` property to the rich text field like the following. The value should be an array of strings, one for each label.\n\n   This example adds a label named **superscript** to a field named `text`.\n\n   ```json {14}\n   {\n     \"id\": \"text_with_image\",\n     \"type\": \"SharedSlice\",\n     \"name\": \"TextWithImage\",\n     \"description\": \"TextWithImage\",\n     \"variations\": [\n       {\n         // ...\n         \"primary\": {\n           \"text\": {\n             \"type\": \"StructuredText\",\n             \"config\": {\n               \"label\": \"Text\",\n               \"labels\": [\"superscript\"],\n               \"multi\": \"paragraph,strong,em\"\n             }\n           }\n         }\n         // ...\n       }\n     ]\n   }\n   ```\n\n3. **Display rich text with custom formatting**\n\n   Use a custom component for `label` blocks and read the block's `node.data.label` property to conditionally style the text.\n\n   This example displays a `<sup>` HTML element when the label is **superscript**.\n\n   **Next.js example:**\n\n   ```tsx {4-8}\n   <PrismicRichText\n     field={slice.primary.text}\n     components={{\n       label: ({ node, children }) => {\n         if (node.data.label === \"superscript\") {\n           return <sup>{children}</sup>;\n         }\n       },\n     }}\n   />\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html {4}\n   <PrismicRichText\n     :field=\"slice.primary.my_rich_text_field\"\n     :components=\"{\n       label: Label,\n     }\"\n   />\n   ```\n\n   ```vue filename=components/Label.vue\n   <script setup lang=\"ts\">\n   defineProps(getRichTextComponentProps(\"label\"));\n   </script>\n\n   <template>\n     <sup v-if=\"node.data.label === 'superscript'\"><slot /></sup>\n     <span v-else :class=\"node.data.label\"><slot /></span>\n   </template>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte {8}\n   <script>\n     import { Label } from \"$lib/components/Label\";\n   </script>\n\n   <PrismicRichText\n     field={slice.primary.my_rich_text_field}\n     components={{\n       label: Label,\n     }}\n   />\n   ```\n\n   ```svelte filename=src/lib/components/Label.svelte\n   <script lang=\"ts\">\n     import type { RTLabelNode } from \"@prismicio/client\";\n     import type { Snippet } from \"svelte\";\n\n     type Props = {\n       node: RTLabelNode;\n       children: Snippet;\n     };\n\n     let { node, children }: Props = $props();\n   </script>\n\n   {#if node.data.label === \"superscript\"}\n     <sup>{@render children()}</sup>\n   {:else}\n     <span class={node.data.label}>{@render children()}</span>\n   {/if}\n   ```\n\n   [Learn more about using custom UI components](#use-custom-ui-components)\n\n# Display rich text\n\nPrismic provides rich text components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\n**Nuxt example:**\n\n```vue-html\n<PrismicRichText :field=\"slice.primary.my_rich_text_field\" />\n```\n\n**SvelteKit example:**\n\n```svelte\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\nPrismic also provides components for displaying rich text as plain text.\n\n**Next.js example:**\n\n```tsx\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictext) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicText :field=\"slice.primary.my_rich_text_field\" />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictext) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictext) to learn more.\n\n# Tips\n\n* **Style rich text**\n\n  Rich text can be styled using CSS and a wrapper element.\n\n  * **Markup:**\n\n    **Next.js example:**\n\n    ```tsx\n    <div className=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n    **Nuxt example:**\n\n    ```vue-html\n    <PrismicRichText\n      :field=\"slice.primary.my_rich_text_field\"\n      wrapper=\"div\"\n      class=\"rich-text\"\n    />\n    ```\n\n    **SvelteKit example:**\n\n    ```svelte\n    <div class=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n  * **CSS:**\n\n    ```css\n    .rich-text h1 {\n      font-size: 4rem;\n      font-weight: bold;\n      margin: 2rem 0;\n    }\n\n    .rich-text p {\n      margin: 2rem 0;\n    }\n    ```\n\n  > Rich text can also be styled using custom components. [See below](#use-custom-ui-components).\n\n* **Use custom UI components**\n\n  Prismic's rich text components can render custom components for each block type.\n\n  **Next.js example:**\n\n  ```tsx {5-10}\n  import { Heading } from \"@/components/Heading\";\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      // Use a component from another file.\n      heading1: ({ children }) => <Heading as=\"h1\">{children}</Heading>,\n      // Use an HTML element with class names.\n      paragraph: ({ children }) => <p className=\"my-8\">{children}</p>,\n    }}\n  />;\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext)\n\n  **Nuxt example:**\n\n  ```vue-html {3-6}\n  <PrismicRichText\n    :field=\"slice.primary.my_rich_text_field\"\n    :components=\"{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }\"\n  />\n  ```\n\n  ```vue filename=components/Heading.vue\n  <template>\n    <h1 class=\"font-bold text-xl\"><slot /></h1>\n  </template>\n  ```\n\n  ```vue filename=components/Paragraph.vue\n  <template>\n    <p class=\"my-8\"><slot /></p>\n  </template>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext)\n\n  **SvelteKit example:**\n\n  ```svelte {8-11}\n  <script>\n    import { Heading } from \"$lib/components/Heading\";\n    import { Paragraph } from \"$lib/components/Paragraph\";\n  </script>\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }}\n  />\n  ```\n\n  ```svelte filename=src/lib/components/Heading.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTHeading1Node } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTHeading1Node> = $props();\n  </script>\n\n  <h1 class=\"font-bold text-xl\">\n    {@render children?.()}\n  </h1>\n  ```\n\n  ```svelte filename=src/lib/components/Paragraph.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTParagraphNode } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTParagraphNode> = $props();\n  </script>\n\n  <p class=\"my-8\">\n    {@render children?.()}\n  </p>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext)\n\n* **Convert rich text to HTML or plain text**\n\n  `@prismicio/client` provides helpers to convert rich text to HTML or plain text.\n\n  ```ts\n  import { asHTML, asText } from \"@prismicio/client\";\n\n  const html = asHTML(slice.primary.my_rich_text_field);\n  const text = asText(slice.primary.my_rich_text_field);\n  ```\n\n  [Learn more about asHTML and asText](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#prismicashtml)\n\n* **Use `isFilled.richText()` to check if a rich text field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.richText(slice.primary.my_rich_text_field)) {\n    // Do something if `my_rich_text_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a rich text field looks like from the Content API:\n\n```json\n{\n  \"example_rich_text\": [\n    {\n      \"type\": \"heading1\",\n      \"text\": \"Build a website that grows\",\n      \"spans\": []\n    },\n    {\n      \"type\": \"paragraph\",\n      \"text\": \"Empower marketers to release on-brand pages fast.\",\n      \"spans\": [\n        {\n          \"type\": \"em\",\n          \"start\": 45,\n          \"end\": 48\n        }\n      ]\n    }\n  ]\n}\n```\n\nPrismic returns a JSON representation of the field's formatted content. Prismic's [rich text components](#display-rich-text) are the best way to display the JSON content.\n\n\n### prismic.ImageField\n---\ntitle: \"Image\"\ndescription: \"This article explains what the image field is and how to configure it.\"\nmeta_title: \"Image\"\ncategory: \"fields\"\n---\n\nContent writers can upload, crop, and manage images through the [Page Builder](https://prismic.io/docs/guides/page-builder.md).\n\nPrismic serves images through [imgix](https://www.imgix.com/), a powerful image hosting platform, enabling compression, formatting, and web optimization.\n\nTo learn more about image management capabilities, read [Manage Images](https://prismic.io/docs/guides/manage-images.md).\n\n# Add an image to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add an image field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add an **image** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **(Optional) Add responsive sizes**\n\n   Images can be configured with multiple responsive sizes. Content writers can upload differently sized images with predetermined dimensions.\n\n   Open the field settings and add as many responsive sizes as desired.\n\n# Display images\n\nPrismic provides image components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicNextImage field={slice.primary.my_image_field} />\n```\n\nSee the [`<PrismicNextImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-next/v2.md#prismicnextimage) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicImage :field=\"slice.primary.my_image_field\" />\n```\n\nSee the [`<PrismicImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v4.md#prismicimage) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicImage field={slice.primary.my_image_field} />\n```\n\nSee the [`<PrismicImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicimage) to learn more.\n\n# Tips\n\n* **Transform images through the API**\n\n  You can apply [any imgix transformation](https://docs.imgix.com/apis/rendering) to your image using the `imgixParams` prop. All Prismic image components support the `imgixParams` prop.\n\n  This example makes an image black and white:\n\n  **Next.js example:**\n\n  ```tsx {3}\n  <PrismicNextImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ sat: -100 }}\n  />\n  ```\n\n  **Nuxt example:**\n\n  ```vue-html {3}\n  <PrismicImage\n    :field=\"slice.primary.my_image_field\"\n    :imgix-params=\"{ sat: -100 }\"\n  />\n  ```\n\n  **SvelteKit example:**\n\n  ```svelte {3}\n  <PrismicImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ sat: -100 }}\n  />\n  ```\n\n  Refer to the [imgix documentation](https://docs.imgix.com/apis/url) to learn more about image formatting options.\n\n* **Images are automatically compressed**\n\n  All images distributed through the API have an `auto=compress,format` URL parameter. The parameter automatically compresses the image and serves the most efficient format (usually WebP).\n\n  To disable formatting and compression, set `auto: null` in your `imgixParams`.\n\n  **Next.js example:**\n\n  ```tsx {3}\n  <PrismicNextImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ auto: null }}\n  />\n  ```\n\n  **Nuxt example:**\n\n  ```vue-html {3}\n  <PrismicImage\n    :field=\"slice.primary.my_image_field\"\n    :imgix-params=\"{ auto: null }\"\n  />\n  ```\n\n  **SvelteKit example:**\n\n  ```svelte {3}\n  <PrismicImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ auto: null }}\n  />\n  ```\n\n  Refer to the [imgix documentation](https://docs.imgix.com/apis/url) to learn more about image formatting options.\n\n* **Don’t compress GIFs before uploading**\n\n  It’s best **not to** compress your GIFs before serving them with imgix. Since we optimize images, uploading a pre-compressed GIF can have the opposite effect, degrading the quality and increasing the GIF’s file size.\n\n  imgix's automatic compression will turn GIFs into an animated WebP in supported browsers (such as Chrome).\n\n* **Use `isFilled.image()` to check if an image field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.image(slice.primary.my_image_field)) {\n    // Do something if `my_image_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what an image looks like from the Content API:\n\n```json\n{\n  \"example_image\": {\n    \"id\": \"uYM_PQJ8VvY\",\n    \"url\": \"https://images.prismic.io/slicemachine-blank/dcea6535-f43b-49a7-8623-bf281aaf1cb2_roller-skating.png?auto=compress,format\",\n    \"alt\": \"An illustration of a roller skater.\",\n    \"copyright\": null,\n    \"dimensions\": {\n      \"width\": 2048,\n      \"height\": 1536\n    }\n  }\n}\n```\n\nWhen an image supports [responsive sizes](#optional-add-responsive-sizes), each size is added as a property:\n\n```json {5-20}\n{\n  \"example_image\": {\n    // ...\n    \"id\": \"uYM_PQJ8VvY\",\n    \"Mobile\": {\n      \"id\": \"uYM_PQJ8VvY\",\n      \"url\": \"https://images.prismic.io/slicemachine-blank/dcea6535-f43b-49a7-8623-bf281aaf1cb2_roller-skating.png?auto=compress,format&w=400&h=300\",\n      \"alt\": \"An illustration of a roller skater.\",\n      \"copyright\": null,\n      \"dimensions\": {\n        \"width\": 400,\n        \"height\": 300\n      },\n      \"edit\": {\n        \"x\": 0,\n        \"y\": 0,\n        \"zoom\": 1,\n        \"background\": \"transparent\"\n      }\n    }\n  }\n}\n```\n\n\n### prismic.LinkField\n---\ntitle: \"Link\"\ndescription: \"This article explains what the link field is and how to configure it.\"\nmeta_title: \"Link\"\ncategory: \"fields\"\n---\n\nThe link field allows content writers to create web links. Relative and absolute URLs are supported, as well as linking to Prismic documents and media from the media library.\n\n> The link field and the [content relationship field](https://prismic.io/docs/fields/content-relationship.md) look similar. Link fields should be used to create web links, like a \"Learn More\" link. Content relationship fields should be used to create data structures, like a blog post pointing to its author.\n\n# Add a link field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a link field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **link** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Allow target blank** checkbox determines if a content writer can configure a link to open in a new window.\n\n3. **(Optional) Allow display text**\n\n   Links may need a text label, such as \"Our products\" or \"Learn more.\" Content writers can provide a label when display text is allowed.\n\n   Open the field settings and check the **Allow display text** setting.\n\n4. **(Optional) Allow variants**\n\n   Links may need a specific visual style, like \"Primary\" or \"Secondary\" styling. Content writers can select from a list of styles you set when variants are enabled.\n\n   Open the field settings and enable variants under the **Variants** settings. Add as many variant options as needed.\n\n5. **(Optional) Make the link field repeatable**\n\n   Content writers can provide multiple links from one field when the field is configured to be repeatable.\n\n   Open the field settings and check the **Make this link repeatable** setting.\n\n# Display links\n\nPrismic provides link components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicNextLink field={slice.primary.my_link_field} />\n```\n\nSee the [`<PrismicNextLink>` documentation](https://prismic.io/docs/technical-reference/prismicio-next/v2.md#prismicnextlink) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicLink :field=\"slice.primary.my_link_field\" />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismic-vue/v4.md#prismiclink) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicLink field={slice.primary.my_link_field} />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismic-svelte/v0.md#prismiclink) to learn more.\n\nA repeatable link field can be displayed using a loop.\n\n**Next.js example:**\n\n```tsx\n<ul>\n  {slice.primary.my_link_field.map((link) => (\n    <li key={link?.text}>\n      <PrismicNextLink field={link} />\n    </li>\n  ))}\n</ul>\n```\n\n**Nuxt example:**\n\n```vue-html\n<ul>\n  <li v-for=\"link in slice.primary.my_link_field\">\n    <PrismicLink :field=\"link\" />\n  </li>\n</ul>\n```\n\n**SvelteKit example:**\n\n```svelte\n<ul>\n  {#each slice.primary.my_link_field as link}\n    <li><PrismicLink field={link} /></li>\n  {/each}\n</ul>\n```\n\n# Tips\n\n* **Use display text as labels**\n\n  The link's text label can be managed in Prismic when [display text](#optional-allow-display-text) is enabled. Prismic's link components automatically display the text.\n\n* **Use variants to style links**\n\n  [Link variants](#optional-allow-variants) can determine how links are styled. This example adds a CSS class based on the selected variant.\n\n  **Next.js example:**\n\n  ```tsx\n  <PrismicNextLink\n    field={slice.primary.button}\n    className={clsx(\"button\", {\n      primary: slice.primary.button.variant === \"Primary\",\n      secondary: slice.primary.button.variant === \"Secondary\",\n    })}\n  />\n  ```\n\n  This example uses [`clsx`](https://www.npmjs.com/package/clsx) to conditionally apply class names.\n\n  **Nuxt example:**\n\n  ```vue-html\n  <PrismicLink\n    :field=\"slice.primary.button\"\n    class=\"button\"\n    :class=\"{\n      primary: slice.primary.button.variant === 'Primary',\n      secondary: slice.primary.button.variant === 'Secondary',\n    }\"\n  />\n  ```\n\n  This example uses Vue's [`:class`](https://vuejs.org/guide/essentials/class-and-style) directive to conditionally apply class names.\n\n  **SvelteKit example:**\n\n  ```svelte\n  <PrismicLink\n    field={slice.primary.button}\n    class={[\n      \"button\",\n      {\n        primary: slice.primary.button.variant === \"Primary\",\n        secondary: slice.primary.button.variant === \"Secondary\",\n      },\n    ]}\n  />\n  ```\n\n  This example uses Svelte's [`class`](https://svelte.dev/docs/svelte/class) attribute to conditionally apply class names.\n\n* **Use `isFilled.link()` to check if a link field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismic/client\";\n\n  if (isFilled.link(slice.primary.button)) {\n    // Do something if `button` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a link field looks like from the Content API:\n\n```json\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\"\n  }\n}\n```\n\nA link configured to open in a new window includes a `target` property.\n\n```json {5}\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\",\n    \"target\": \"_blank\"\n  }\n}\n```\n\nA link that has display text or a variant includes a `text` or `variant` property.\n\n```json {5-6}\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\",\n    \"text\": \"Click Here\",\n    \"variant\": \"Primary\"\n  }\n}\n```\n\nA repeatable link is returned as an array of links.\n\n```json\n{\n  \"example_link_to_media\": [\n    {\n      \"link_type\": \"Web\",\n      \"url\": \"https://prismic.io\"\n    },\n    {\n      \"link_type\": \"Web\",\n      \"url\": \"https://prismic.io/docs\"\n    }\n  ]\n}\n```\n\n\n## Next Steps\nImplement the desired code changes following the documentation above and project patterns."
    }
  ]
}