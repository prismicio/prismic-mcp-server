{
  "content": [
    {
      "type": "text",
      "text": "# Prismic Slice Implementation Guide

## Required Steps
1. **Analyze model.json** at /tmp/model.json
   - Create field analysis table: Field | Type | Config | Implementation
   - Use exact model configuration, not assumptions

2. **Follow project patterns**
   - Framework: next
   - Styling: Match existing slices if available, otherwise use project's styling system
   - Code: Analyze codebase for consistent patterns and conventions

3. **Implement fields dynamically**
   - All content must come from Prismic fields
   - Never hardcode visible content
   - Use appropriate components for each field type based on the following field documentation

## Field Documentation
### prismic.RichTextField
---
title: "Rich Text"
description: "This article explains what the rich text field is and how to configure it."
meta_title: "Rich Text"
category: "fields"
---

The rich text field allows content writers to write formatted content, including paragraphs, headings, lists, and more.

> The [text field](https://prismic.io/docs/fields/text.md) and rich text field look similar. Use the text field for simple text that does not need formatting. Use the rich text field for text that requires formatting.

# Add a rich text field to a content model

1. **Open Slice Machine**

   In your Prismic project, start Slice Machine to begin editing content models.

   ```sh
   npx start-slicemachine --open
   ```

2. **Add a rich text field**

   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **rich text** field.

   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.

   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.

   The **Allow target blank for links** checkbox determines if a content writer can configure links to open in a new window.

   The **Allow multiple paragraphs** checkbox determines if a content writer can write multiple blocks of content.

3. **(Optional) Allow a subset of formatting options**

   By default, rich text fields support all formatting options. In some cases, you may want to restrict formatting options, such as only allowing H1, H2, and H3 headings.

   Open the field settings and enable or disable formatting options under the **Accept** section.

# Use labels for custom formatting

Rich text fields support standard text formatting options, like bold and emphasized text. If the formatting you need is not supported, add custom formatting options using **labels**.

Content writers can select text and apply a label. In your website's code, you can read the label and apply custom formatting by, for example, adding a custom CSS class.

You can register as many labels as needed.

## How to add a label to a rich text field

Unlike other rich text options, labels cannot be configured through [Slice Machine](https://prismic.io/docs/slice-machine.md). Instead, they must be added by editing your content model's JSON file.

1. **Open your content model's JSON file**

   In your Prismic project, open the slice, page type, or custom type JSON file you want to modify. The file location depends on the content type:

   * **Slices**: Typically in `src/slices/<name>/model.json`.
   * **Page types**: `customtypes/<name>/index.json`.
   * **Custom types**: `customtypes/<name>/index.json`.

2. **Add a label**

   Add a `labels` property to the rich text field like the following. The value should be an array of strings, one for each label.

   This example adds a label named **superscript** to a field named `text`.

   ```json {14}
   {
     "id": "text_with_image",
     "type": "SharedSlice",
     "name": "TextWithImage",
     "description": "TextWithImage",
     "variations": [
       {
         // ...
         "primary": {
           "text": {
             "type": "StructuredText",
             "config": {
               "label": "Text",
               "labels": ["superscript"],
               "multi": "paragraph,strong,em"
             }
           }
         }
         // ...
       }
     ]
   }
   ```

3. **Display rich text with custom formatting**

   Use a custom component for `label` blocks and read the block's `node.data.label` property to conditionally style the text.

   This example displays a `<sup>` HTML element when the label is **superscript**.

   **Next.js example:**

   ```tsx {4-8}
   <PrismicRichText
     field={slice.primary.text}
     components={{
       label: ({ node, children }) => {
         if (node.data.label === "superscript") {
           return <sup>{children}</sup>;
         }
       },
     }}
   />
   ```

   **Nuxt example:**

   ```vue-html {4}
   <PrismicRichText
     :field="slice.primary.my_rich_text_field"
     :components="{
       label: Label,
     }"
   />
   ```

   ```vue filename=components/Label.vue
   <script setup lang="ts">
   defineProps(getRichTextComponentProps("label"));
   </script>

   <template>
     <sup v-if="node.data.label === 'superscript'"><slot /></sup>
     <span v-else :class="node.data.label"><slot /></span>
   </template>
   ```

   **SvelteKit example:**

   ```svelte {8}
   <script>
     import { Label } from "$lib/components/Label";
   </script>

   <PrismicRichText
     field={slice.primary.my_rich_text_field}
     components={{
       label: Label,
     }}
   />
   ```

   ```svelte filename=src/lib/components/Label.svelte
   <script lang="ts">
     import type { RTLabelNode } from "@prismicio/client";
     import type { Snippet } from "svelte";

     type Props = {
       node: RTLabelNode;
       children: Snippet;
     };

     let { node, children }: Props = $props();
   </script>

   {#if node.data.label === "superscript"}
     <sup>{@render children()}</sup>
   {:else}
     <span class={node.data.label}>{@render children()}</span>
   {/if}
   ```

   [Learn more about using custom UI components](#use-custom-ui-components)

# Display rich text

Prismic provides rich text components for Next.js, Nuxt, and SvelteKit.

**Next.js example:**

```tsx
<PrismicRichText field={slice.primary.my_rich_text_field} />
```

**Nuxt example:**

```vue-html
<PrismicRichText :field="slice.primary.my_rich_text_field" />
```

**SvelteKit example:**

```svelte
<PrismicRichText field={slice.primary.my_rich_text_field} />
```

Prismic also provides components for displaying rich text as plain text.

**Next.js example:**

```tsx
<PrismicText field={slice.primary.my_rich_text_field} />
```

See the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictext) to learn more.

**Nuxt example:**

```vue-html
<PrismicText :field="slice.primary.my_rich_text_field" />
```

See the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictext) to learn more.

**SvelteKit example:**

```svelte
<PrismicText field={slice.primary.my_rich_text_field} />
```

See the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictext) to learn more.

# Tips

* **Style rich text**

  Rich text can be styled using CSS and a wrapper element.

  * **Markup:**

    **Next.js example:**

    ```tsx
    <div className="rich-text">
      <PrismicRichText field={slice.primary.my_rich_text_field} />
    </div>
    ```

    **Nuxt example:**

