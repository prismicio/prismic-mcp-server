{
  "content": [
    {
      "type": "text",
      "text": "
				# How to code a slice
				This tool contains MANDATORY STEPS that MUST be followed.
				FAILING to read and implement ANY section marked MANDATORY will result in INCORRECT code.
				YOU MUST read this ENTIRE output from beginning to end BEFORE writing a SINGLE line of code.
				NO EXCEPTIONS - ALL steps are required.

				## Fields documentation [MANDATORY]
				Fields documentation to follow: [{"prismic.TitleField":"
					Use the PrismicText component to render title field content as plain text, typically wrapped in an appropriate heading element. This is the preferred approach for title fields.

					```
					
									import { PrismicText } from "@prismicio/react"

									<h1>
										<PrismicText field={slice.primary.my_title_field} />
									</h1>
								
					```

					## Alternative: Using PrismicRichText

					You can also use the PrismicRichText component if you need more complex rendering or formatting.

					```
					
									import { PrismicRichText } from "@prismicio/react"

									<PrismicRichText field={slice.primary.my_title_field} />
								
					```

					# Tips

					## Styling

					You can style the component using a wrapper `<div>` element with CSS classes. The wrapper element can target child elements to apply styles.

					```
					
									<div className="title">
										<PrismicRichText field={slice.primary.my_title_field} />
									</div>
								
					```

					```css
					.title h1 {
						font-size: 3rem;
						font-weight: bold;
						margin-bottom: 1rem;
					}

					.title h2 {
						font-size: 2rem;
						font-weight: semibold;
						margin-bottom: 0.75rem;
					}
					```

					## Advanced Styling with Components

					The `components` prop is primarily used for advanced use cases where you need to use another UI component or if you prefer not using cascading CSS.

					```
					
									import { PrismicRichText } from "@prismicio/react"
									import { Heading } from "@/components/Heading";

									<PrismicRichText
										field={slice.primary.my_title_field}
										components={{
											// Use a component from another file.
											heading1: ({ children }) => <Heading as="h1">{children}</Heading>,
											// Use an HTML element with class names.
											heading2: ({ children }) => <h2 className="my-8">{children}</h2>,
										}}
									/>;
								
					```

					## Use `isFilled.richText()` to check if a rich text field has a value

					```ts
					import { isFilled } from "@prismicio/client";

					if (isFilled.richText(slice.primary.my_title_field)) {
						// Do something if `my_title_field` has a value.
					}
					```
				"},{"prismic.RichTextField":"
					Prismic provides a RichText component.

					```
					
									import { PrismicRichText } from "@prismicio/react"

									<PrismicRichText field={slice.primary.my_rich_text_field} />
								
					```


					# Tips

					## Styling

					You can style the component using a wrapper `<div>` element with CSS classes. The wrapper element can target child elements to apply styles.

					```
					
									<div className="rich-text">
										<PrismicRichText field={slice.primary.my_rich_text_field} />
									</div>
								
					```

					```css
					.rich-text h1 {
						font-size: 2rem;
						margin-bottom: 1rem;
					}

					.rich-text p {
						margin-bottom: 0.75rem;
						line-height: 1.6;
					}

					.rich-text strong {
						font-weight: bold;
					}
					```

					## Advanced Styling with Components

					The `components` prop is primarily used for advanced use cases where you need to use another UI component or if you prefer not using cascading CSS.

					```
					
									import { PrismicRichText } from "@prismicio/react"
									import { Heading } from "@/components/Heading";

									<PrismicRichText
										field={slice.primary.my_rich_text_field}
										components={{
											// Use a component from another file.
											heading1: ({ children }) => <Heading as="h1">{children}</Heading>,
											// Use an HTML element with class names.
											paragraph: ({ children }) => <p className="my-8">{children}</p>,
										}}
									/>;
								
					```

					## Use `isFilled.richText()` to check if a rich text field has a value

					```ts
					import { isFilled } from "@prismicio/client";

					if (isFilled.richText(slice.primary.my_rich_text_field)) {
						// Do something if `my_rich_text_field` has a value.
					}
					```
				"},{"prismic.ImageField":"
					Prismic provides an Image component.

					```
					
									import { PrismicNextImage } from "@prismicio/next"

									<PrismicNextImage field={slice.primary.my_image_field} />
								
					```

					# Tips

					## `alt` and `fallbackAlt` attributes

					The `alt` and `fallbackAlt` attributes are manage automatically by the Image component.
					DO NOT provide an `alt` or `fallbackAlt` attribute to the component.

					## Styling

					IMPORTANT: Apply classes directly via the class prop, don't wrap the component in a `<div>`.

					## Use `isFilled.image()` to check if an image field has a value

					```ts
					import { isFilled } from "@prismicio/client";

					if (isFilled.image(slice.primary.my_image_field)) {
						// Do something if `my_image_field` has a value.
					}
					```
				"},{"prismic.LinkField":"
					Prismic provides a Link component.
					```
					
									import { PrismicNextLink } from "@prismicio/next"

									<PrismicNextLink field={slice.primary.my_link_field} />
								
					```

					A repeatable link field can be displayed using a loop.

					```
					
\