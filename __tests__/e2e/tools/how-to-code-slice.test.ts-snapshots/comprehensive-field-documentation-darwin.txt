{
  "content": [
    {
      "type": "text",
      "text": "# Prismic Slice Implementation Guide\n\n## Required Steps\n1. **Analyze model.json** at /tmp/model.json\n   - Create field analysis table: Field | Type | Config | Implementation\n   - Use exact model configuration, not assumptions\n\n2. **Follow project patterns**\n   - Framework: next\n   - Styling: Match existing slices if available, otherwise use project's styling system\n   - Code: Analyze codebase for consistent patterns and conventions\n\n3. **Implement fields dynamically**\n   - All content must come from Prismic fields\n   - Never hardcode visible content\n   - Use appropriate components for each field type based on the following field documentation\n\n## Field Documentation\n### prismic.TitleField\n---\ntitle: \"Rich Text\"\ndescription: \"This article explains what the rich text field is and how to configure it.\"\nmeta_title: \"Rich Text\"\ncategory: \"fields\"\n---\n\nThe rich text field allows content writers to write formatted content, including paragraphs, headings, lists, and more.\n\n> The [text field](https://prismic.io/docs/fields/text.md) and rich text field look similar. Use the text field for simple text that does not need formatting. Use the rich text field for text that requires formatting.\n\n# Add a rich text field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a rich text field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **rich text** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Allow target blank for links** checkbox determines if a content writer can configure links to open in a new window.\n\n   The **Allow multiple paragraphs** checkbox determines if a content writer can write multiple blocks of content.\n\n3. **(Optional) Allow a subset of formatting options**\n\n   By default, rich text fields support all formatting options. In some cases, you may want to restrict formatting options, such as only allowing H1, H2, and H3 headings.\n\n   Open the field settings and enable or disable formatting options under the **Accept** section.\n\n# Use labels for custom formatting\n\nRich text fields support standard text formatting options, like bold and emphasized text. If the formatting you need is not supported, add custom formatting options using **labels**.\n\nContent writers can select text and apply a label. In your website's code, you can read the label and apply custom formatting by, for example, adding a custom CSS class.\n\nYou can register as many labels as needed.\n\n## How to add a label to a rich text field\n\nUnlike other rich text options, labels cannot be configured through [Slice Machine](https://prismic.io/docs/slice-machine.md). Instead, they must be added by editing your content model's JSON file.\n\n1. **Open your content model's JSON file**\n\n   In your Prismic project, open the slice, page type, or custom type JSON file you want to modify. The file location depends on the content type:\n\n   * **Slices**: Typically in `src/slices/<name>/model.json`.\n   * **Page types**: `customtypes/<name>/index.json`.\n   * **Custom types**: `customtypes/<name>/index.json`.\n\n2. **Add a label**\n\n   Add a `labels` property to the rich text field like the following. The value should be an array of strings, one for each label.\n\n   This example adds a label named **superscript** to a field named `text`.\n\n   ```json {14}\n   {\n     \"id\": \"text_with_image\",\n     \"type\": \"SharedSlice\",\n     \"name\": \"TextWithImage\",\n     \"description\": \"TextWithImage\",\n     \"variations\": [\n       {\n         // ...\n         \"primary\": {\n           \"text\": {\n             \"type\": \"StructuredText\",\n             \"config\": {\n               \"label\": \"Text\",\n               \"labels\": [\"superscript\"],\n               \"multi\": \"paragraph,strong,em\"\n             }\n           }\n         }\n         // ...\n       }\n     ]\n   }\n   ```\n\n3. **Display rich text with custom formatting**\n\n   Use a custom component for `label` blocks and read the block's `node.data.label` property to conditionally style the text.\n\n   This example displays a `<sup>` HTML element when the label is **superscript**.\n\n   **Next.js example:**\n\n   ```tsx {4-8}\n   <PrismicRichText\n     field={slice.primary.text}\n     components={{\n       label: ({ node, children }) => {\n         if (node.data.label === \"superscript\") {\n           return <sup>{children}</sup>;\n         }\n       },\n     }}\n   />\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html {4}\n   <PrismicRichText\n     :field=\"slice.primary.my_rich_text_field\"\n     :components=\"{\n       label: Label,\n     }\"\n   />\n   ```\n\n   ```vue filename=components/Label.vue\n   <script setup lang=\"ts\">\n   defineProps(getRichTextComponentProps(\"label\"));\n   </script>\n\n   <template>\n     <sup v-if=\"node.data.label === 'superscript'\"><slot /></sup>\n     <span v-else :class=\"node.data.label\"><slot /></span>\n   </template>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte {8}\n   <script>\n     import { Label } from \"$lib/components/Label\";\n   </script>\n\n   <PrismicRichText\n     field={slice.primary.my_rich_text_field}\n     components={{\n       label: Label,\n     }}\n   />\n   ```\n\n   ```svelte filename=src/lib/components/Label.svelte\n   <script lang=\"ts\">\n     import type { RTLabelNode } from \"@prismicio/client\";\n     import type { Snippet } from \"svelte\";\n\n     type Props = {\n       node: RTLabelNode;\n       children: Snippet;\n     };\n\n     let { node, children }: Props = $props();\n   </script>\n\n   {#if node.data.label === \"superscript\"}\n     <sup>{@render children()}</sup>\n   {:else}\n     <span class={node.data.label}>{@render children()}</span>\n   {/if}\n   ```\n\n   [Learn more about using custom UI components](#use-custom-ui-components)\n\n# Display rich text\n\nPrismic provides rich text components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\n**Nuxt example:**\n\n```vue-html\n<PrismicRichText :field=\"slice.primary.my_rich_text_field\" />\n```\n\n**SvelteKit example:**\n\n```svelte\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\nPrismic also provides components for displaying rich text as plain text.\n\n**Next.js example:**\n\n```tsx\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictext) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicText :field=\"slice.primary.my_rich_text_field\" />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictext) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictext) to learn more.\n\n# Tips\n\n* **Style rich text**\n\n  Rich text can be styled using CSS and a wrapper element.\n\n  * **Markup:**\n\n    **Next.js example:**\n\n    ```tsx\n    <div className=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n    **Nuxt example:**\n\n    ```vue-html\n    <PrismicRichText\n      :field=\"slice.primary.my_rich_text_field\"\n      wrapper=\"div\"\n      class=\"rich-text\"\n    />\n    ```\n\n    **SvelteKit example:**\n\n    ```svelte\n    <div class=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n  * **CSS:**\n\n    ```css\n    .rich-text h1 {\n      font-size: 4rem;\n      font-weight: bold;\n      margin: 2rem 0;\n    }\n\n    .rich-text p {\n      margin: 2rem 0;\n    }\n    ```\n\n  > Rich text can also be styled using custom components. [See below](#use-custom-ui-components).\n\n* **Use custom UI components**\n\n  Prismic's rich text components can render custom components for each block type.\n\n  **Next.js example:**\n\n  ```tsx {5-10}\n  import { Heading } from \"@/components/Heading\";\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      // Use a component from another file.\n      heading1: ({ children }) => <Heading as=\"h1\">{children}</Heading>,\n      // Use an HTML element with class names.\n      paragraph: ({ children }) => <p className=\"my-8\">{children}</p>,\n    }}\n  />;\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext)\n\n  **Nuxt example:**\n\n  ```vue-html {3-6}\n  <PrismicRichText\n    :field=\"slice.primary.my_rich_text_field\"\n    :components=\"{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }\"\n  />\n  ```\n\n  ```vue filename=components/Heading.vue\n  <template>\n    <h1 class=\"font-bold text-xl\"><slot /></h1>\n  </template>\n  ```\n\n  ```vue filename=components/Paragraph.vue\n  <template>\n    <p class=\"my-8\"><slot /></p>\n  </template>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext)\n\n  **SvelteKit example:**\n\n  ```svelte {8-11}\n  <script>\n    import { Heading } from \"$lib/components/Heading\";\n    import { Paragraph } from \"$lib/components/Paragraph\";\n  </script>\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }}\n  />\n  ```\n\n  ```svelte filename=src/lib/components/Heading.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTHeading1Node } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTHeading1Node> = $props();\n  </script>\n\n  <h1 class=\"font-bold text-xl\">\n    {@render children?.()}\n  </h1>\n  ```\n\n  ```svelte filename=src/lib/components/Paragraph.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTParagraphNode } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTParagraphNode> = $props();\n  </script>\n\n  <p class=\"my-8\">\n    {@render children?.()}\n  </p>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext)\n\n* **Convert rich text to HTML or plain text**\n\n  `@prismicio/client` provides helpers to convert rich text to HTML or plain text.\n\n  ```ts\n  import { asHTML, asText } from \"@prismicio/client\";\n\n  const html = asHTML(slice.primary.my_rich_text_field);\n  const text = asText(slice.primary.my_rich_text_field);\n  ```\n\n  [Learn more about asHTML and asText](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#prismicashtml)\n\n* **Use `isFilled.richText()` to check if a rich text field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.richText(slice.primary.my_rich_text_field)) {\n    // Do something if `my_rich_text_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a rich text field looks like from the Content API:\n\n```json\n{\n  \"example_rich_text\": [\n    {\n      \"type\": \"heading1\",\n      \"text\": \"Build a website that grows\",\n      \"spans\": []\n    },\n    {\n      \"type\": \"paragraph\",\n      \"text\": \"Empower marketers to release on-brand pages fast.\",\n      \"spans\": [\n        {\n          \"type\": \"em\",\n          \"start\": 45,\n          \"end\": 48\n        }\n      ]\n    }\n  ]\n}\n```\n\nPrismic returns a JSON representation of the field's formatted content. Prismic's [rich text components](#display-rich-text) are the best way to display the JSON content.\n\n\n### prismic.RichTextField\n---\ntitle: \"Rich Text\"\ndescription: \"This article explains what the rich text field is and how to configure it.\"\nmeta_title: \"Rich Text\"\ncategory: \"fields\"\n---\n\nThe rich text field allows content writers to write formatted content, including paragraphs, headings, lists, and more.\n\n> The [text field](https://prismic.io/docs/fields/text.md) and rich text field look similar. Use the text field for simple text that does not need formatting. Use the rich text field for text that requires formatting.\n\n# Add a rich text field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a rich text field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **rich text** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Allow target blank for links** checkbox determines if a content writer can configure links to open in a new window.\n\n   The **Allow multiple paragraphs** checkbox determines if a content writer can write multiple blocks of content.\n\n3. **(Optional) Allow a subset of formatting options**\n\n   By default, rich text fields support all formatting options. In some cases, you may want to restrict formatting options, such as only allowing H1, H2, and H3 headings.\n\n   Open the field settings and enable or disable formatting options under the **Accept** section.\n\n# Use labels for custom formatting\n\nRich text fields support standard text formatting options, like bold and emphasized text. If the formatting you need is not supported, add custom formatting options using **labels**.\n\nContent writers can select text and apply a label. In your website's code, you can read the label and apply custom formatting by, for example, adding a custom CSS class.\n\nYou can register as many labels as needed.\n\n## How to add a label to a rich text field\n\nUnlike other rich text options, labels cannot be configured through [Slice Machine](https://prismic.io/docs/slice-machine.md). Instead, they must be added by editing your content model's JSON file.\n\n1. **Open your content model's JSON file**\n\n   In your Prismic project, open the slice, page type, or custom type JSON file you want to modify. The file location depends on the content type:\n\n   * **Slices**: Typically in `src/slices/<name>/model.json`.\n   * **Page types**: `customtypes/<name>/index.json`.\n   * **Custom types**: `customtypes/<name>/index.json`.\n\n2. **Add a label**\n\n   Add a `labels` property to the rich text field like the following. The value should be an array of strings, one for each label.\n\n   This example adds a label named **superscript** to a field named `text`.\n\n   ```json {14}\n   {\n     \"id\": \"text_with_image\",\n     \"type\": \"SharedSlice\",\n     \"name\": \"TextWithImage\",\n     \"description\": \"TextWithImage\",\n     \"variations\": [\n       {\n         // ...\n         \"primary\": {\n           \"text\": {\n             \"type\": \"StructuredText\",\n             \"config\": {\n               \"label\": \"Text\",\n               \"labels\": [\"superscript\"],\n               \"multi\": \"paragraph,strong,em\"\n             }\n           }\n         }\n         // ...\n       }\n     ]\n   }\n   ```\n\n3. **Display rich text with custom formatting**\n\n   Use a custom component for `label` blocks and read the block's `node.data.label` property to conditionally style the text.\n\n   This example displays a `<sup>` HTML element when the label is **superscript**.\n\n   **Next.js example:**\n\n   ```tsx {4-8}\n   <PrismicRichText\n     field={slice.primary.text}\n     components={{\n       label: ({ node, children }) => {\n         if (node.data.label === \"superscript\") {\n           return <sup>{children}</sup>;\n         }\n       },\n     }}\n   />\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html {4}\n   <PrismicRichText\n     :field=\"slice.primary.my_rich_text_field\"\n     :components=\"{\n       label: Label,\n     }\"\n   />\n   ```\n\n   ```vue filename=components/Label.vue\n   <script setup lang=\"ts\">\n   defineProps(getRichTextComponentProps(\"label\"));\n   </script>\n\n   <template>\n     <sup v-if=\"node.data.label === 'superscript'\"><slot /></sup>\n     <span v-else :class=\"node.data.label\"><slot /></span>\n   </template>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte {8}\n   <script>\n     import { Label } from \"$lib/components/Label\";\n   </script>\n\n   <PrismicRichText\n     field={slice.primary.my_rich_text_field}\n     components={{\n       label: Label,\n     }}\n   />\n   ```\n\n   ```svelte filename=src/lib/components/Label.svelte\n   <script lang=\"ts\">\n     import type { RTLabelNode } from \"@prismicio/client\";\n     import type { Snippet } from \"svelte\";\n\n     type Props = {\n       node: RTLabelNode;\n       children: Snippet;\n     };\n\n     let { node, children }: Props = $props();\n   </script>\n\n   {#if node.data.label === \"superscript\"}\n     <sup>{@render children()}</sup>\n   {:else}\n     <span class={node.data.label}>{@render children()}</span>\n   {/if}\n   ```\n\n   [Learn more about using custom UI components](#use-custom-ui-components)\n\n# Display rich text\n\nPrismic provides rich text components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\n**Nuxt example:**\n\n```vue-html\n<PrismicRichText :field=\"slice.primary.my_rich_text_field\" />\n```\n\n**SvelteKit example:**\n\n```svelte\n<PrismicRichText field={slice.primary.my_rich_text_field} />\n```\n\nPrismic also provides components for displaying rich text as plain text.\n\n**Next.js example:**\n\n```tsx\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictext) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicText :field=\"slice.primary.my_rich_text_field\" />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictext) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicText field={slice.primary.my_rich_text_field} />\n```\n\nSee the [`<PrismicRichText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext) and [`<PrismicText>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictext) to learn more.\n\n# Tips\n\n* **Style rich text**\n\n  Rich text can be styled using CSS and a wrapper element.\n\n  * **Markup:**\n\n    **Next.js example:**\n\n    ```tsx\n    <div className=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n    **Nuxt example:**\n\n    ```vue-html\n    <PrismicRichText\n      :field=\"slice.primary.my_rich_text_field\"\n      wrapper=\"div\"\n      class=\"rich-text\"\n    />\n    ```\n\n    **SvelteKit example:**\n\n    ```svelte\n    <div class=\"rich-text\">\n      <PrismicRichText field={slice.primary.my_rich_text_field} />\n    </div>\n    ```\n\n  * **CSS:**\n\n    ```css\n    .rich-text h1 {\n      font-size: 4rem;\n      font-weight: bold;\n      margin: 2rem 0;\n    }\n\n    .rich-text p {\n      margin: 2rem 0;\n    }\n    ```\n\n  > Rich text can also be styled using custom components. [See below](#use-custom-ui-components).\n\n* **Use custom UI components**\n\n  Prismic's rich text components can render custom components for each block type.\n\n  **Next.js example:**\n\n  ```tsx {5-10}\n  import { Heading } from \"@/components/Heading\";\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      // Use a component from another file.\n      heading1: ({ children }) => <Heading as=\"h1\">{children}</Heading>,\n      // Use an HTML element with class names.\n      paragraph: ({ children }) => <p className=\"my-8\">{children}</p>,\n    }}\n  />;\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismicrichtext)\n\n  **Nuxt example:**\n\n  ```vue-html {3-6}\n  <PrismicRichText\n    :field=\"slice.primary.my_rich_text_field\"\n    :components=\"{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }\"\n  />\n  ```\n\n  ```vue filename=components/Heading.vue\n  <template>\n    <h1 class=\"font-bold text-xl\"><slot /></h1>\n  </template>\n  ```\n\n  ```vue filename=components/Paragraph.vue\n  <template>\n    <p class=\"my-8\"><slot /></p>\n  </template>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismicrichtext)\n\n  **SvelteKit example:**\n\n  ```svelte {8-11}\n  <script>\n    import { Heading } from \"$lib/components/Heading\";\n    import { Paragraph } from \"$lib/components/Paragraph\";\n  </script>\n\n  <PrismicRichText\n    field={slice.primary.my_rich_text_field}\n    components={{\n      heading1: Heading,\n      paragraph: Paragraph,\n    }}\n  />\n  ```\n\n  ```svelte filename=src/lib/components/Heading.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTHeading1Node } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTHeading1Node> = $props();\n  </script>\n\n  <h1 class=\"font-bold text-xl\">\n    {@render children?.()}\n  </h1>\n  ```\n\n  ```svelte filename=src/lib/components/Paragraph.svelte\n  <script lang=\"ts\">\n    import type { RichTextComponentProps } from \"@prismicio/svelte\";\n    import type { RTParagraphNode } from \"@prismicio/client\";\n\n    let { children }: RichTextComponentProps<RTParagraphNode> = $props();\n  </script>\n\n  <p class=\"my-8\">\n    {@render children?.()}\n  </p>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicrichtext)\n\n* **Convert rich text to HTML or plain text**\n\n  `@prismicio/client` provides helpers to convert rich text to HTML or plain text.\n\n  ```ts\n  import { asHTML, asText } from \"@prismicio/client\";\n\n  const html = asHTML(slice.primary.my_rich_text_field);\n  const text = asText(slice.primary.my_rich_text_field);\n  ```\n\n  [Learn more about asHTML and asText](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#prismicashtml)\n\n* **Use `isFilled.richText()` to check if a rich text field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.richText(slice.primary.my_rich_text_field)) {\n    // Do something if `my_rich_text_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a rich text field looks like from the Content API:\n\n```json\n{\n  \"example_rich_text\": [\n    {\n      \"type\": \"heading1\",\n      \"text\": \"Build a website that grows\",\n      \"spans\": []\n    },\n    {\n      \"type\": \"paragraph\",\n      \"text\": \"Empower marketers to release on-brand pages fast.\",\n      \"spans\": [\n        {\n          \"type\": \"em\",\n          \"start\": 45,\n          \"end\": 48\n        }\n      ]\n    }\n  ]\n}\n```\n\nPrismic returns a JSON representation of the field's formatted content. Prismic's [rich text components](#display-rich-text) are the best way to display the JSON content.\n\n\n### prismic.ImageField\n---\ntitle: \"Image\"\ndescription: \"This article explains what the image field is and how to configure it.\"\nmeta_title: \"Image\"\ncategory: \"fields\"\n---\n\nContent writers can upload, crop, and manage images through the [Page Builder](https://prismic.io/docs/guides/page-builder.md).\n\nPrismic serves images through [imgix](https://www.imgix.com/), a powerful image hosting platform, enabling compression, formatting, and web optimization.\n\nTo learn more about image management capabilities, read [Manage Images](https://prismic.io/docs/guides/manage-images.md).\n\n# Add an image to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add an image field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add an **image** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **(Optional) Add responsive sizes**\n\n   Images can be configured with multiple responsive sizes. Content writers can upload differently sized images with predetermined dimensions.\n\n   Open the field settings and add as many responsive sizes as desired.\n\n# Display images\n\nPrismic provides image components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicNextImage field={slice.primary.my_image_field} />\n```\n\nSee the [`<PrismicNextImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-next/v2.md#prismicnextimage) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicImage :field=\"slice.primary.my_image_field\" />\n```\n\nSee the [`<PrismicImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v4.md#prismicimage) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicImage field={slice.primary.my_image_field} />\n```\n\nSee the [`<PrismicImage>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismicimage) to learn more.\n\n# Tips\n\n* **Transform images through the API**\n\n  You can apply [any imgix transformation](https://docs.imgix.com/apis/rendering) to your image using the `imgixParams` prop. All Prismic image components support the `imgixParams` prop.\n\n  This example makes an image black and white:\n\n  **Next.js example:**\n\n  ```tsx {3}\n  <PrismicNextImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ sat: -100 }}\n  />\n  ```\n\n  **Nuxt example:**\n\n  ```vue-html {3}\n  <PrismicImage\n    :field=\"slice.primary.my_image_field\"\n    :imgix-params=\"{ sat: -100 }\"\n  />\n  ```\n\n  **SvelteKit example:**\n\n  ```svelte {3}\n  <PrismicImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ sat: -100 }}\n  />\n  ```\n\n  Refer to the [imgix documentation](https://docs.imgix.com/apis/url) to learn more about image formatting options.\n\n* **Images are automatically compressed**\n\n  All images distributed through the API have an `auto=compress,format` URL parameter. The parameter automatically compresses the image and serves the most efficient format (usually WebP).\n\n  To disable formatting and compression, set `auto: null` in your `imgixParams`.\n\n  **Next.js example:**\n\n  ```tsx {3}\n  <PrismicNextImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ auto: null }}\n  />\n  ```\n\n  **Nuxt example:**\n\n  ```vue-html {3}\n  <PrismicImage\n    :field=\"slice.primary.my_image_field\"\n    :imgix-params=\"{ auto: null }\"\n  />\n  ```\n\n  **SvelteKit example:**\n\n  ```svelte {3}\n  <PrismicImage\n    field={slice.primary.my_image_field}\n    imgixParams={{ auto: null }}\n  />\n  ```\n\n  Refer to the [imgix documentation](https://docs.imgix.com/apis/url) to learn more about image formatting options.\n\n* **Don’t compress GIFs before uploading**\n\n  It’s best **not to** compress your GIFs before serving them with imgix. Since we optimize images, uploading a pre-compressed GIF can have the opposite effect, degrading the quality and increasing the GIF’s file size.\n\n  imgix's automatic compression will turn GIFs into an animated WebP in supported browsers (such as Chrome).\n\n* **Use `isFilled.image()` to check if an image field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.image(slice.primary.my_image_field)) {\n    // Do something if `my_image_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what an image looks like from the Content API:\n\n```json\n{\n  \"example_image\": {\n    \"id\": \"uYM_PQJ8VvY\",\n    \"url\": \"https://images.prismic.io/slicemachine-blank/dcea6535-f43b-49a7-8623-bf281aaf1cb2_roller-skating.png?auto=compress,format\",\n    \"alt\": \"An illustration of a roller skater.\",\n    \"copyright\": null,\n    \"dimensions\": {\n      \"width\": 2048,\n      \"height\": 1536\n    }\n  }\n}\n```\n\nWhen an image supports [responsive sizes](#optional-add-responsive-sizes), each size is added as a property:\n\n```json {5-20}\n{\n  \"example_image\": {\n    // ...\n    \"id\": \"uYM_PQJ8VvY\",\n    \"Mobile\": {\n      \"id\": \"uYM_PQJ8VvY\",\n      \"url\": \"https://images.prismic.io/slicemachine-blank/dcea6535-f43b-49a7-8623-bf281aaf1cb2_roller-skating.png?auto=compress,format&w=400&h=300\",\n      \"alt\": \"An illustration of a roller skater.\",\n      \"copyright\": null,\n      \"dimensions\": {\n        \"width\": 400,\n        \"height\": 300\n      },\n      \"edit\": {\n        \"x\": 0,\n        \"y\": 0,\n        \"zoom\": 1,\n        \"background\": \"transparent\"\n      }\n    }\n  }\n}\n```\n\n\n### prismic.LinkField\n---\ntitle: \"Link\"\ndescription: \"This article explains what the link field is and how to configure it.\"\nmeta_title: \"Link\"\ncategory: \"fields\"\n---\n\nThe link field allows content writers to create web links. Relative and absolute URLs are supported, as well as linking to Prismic documents and media from the media library.\n\n> The link field and the [content relationship field](https://prismic.io/docs/fields/content-relationship.md) look similar. Link fields should be used to create web links, like a \"Learn More\" link. Content relationship fields should be used to create data structures, like a blog post pointing to its author.\n\n# Add a link field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a link field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **link** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Allow target blank** checkbox determines if a content writer can configure a link to open in a new window.\n\n3. **(Optional) Allow display text**\n\n   Links may need a text label, such as \"Our products\" or \"Learn more.\" Content writers can provide a label when display text is allowed.\n\n   Open the field settings and check the **Allow display text** setting.\n\n4. **(Optional) Allow variants**\n\n   Links may need a specific visual style, like \"Primary\" or \"Secondary\" styling. Content writers can select from a list of styles you set when variants are enabled.\n\n   Open the field settings and enable variants under the **Variants** settings. Add as many variant options as needed.\n\n5. **(Optional) Make the link field repeatable**\n\n   Content writers can provide multiple links from one field when the field is configured to be repeatable.\n\n   Open the field settings and check the **Make this link repeatable** setting.\n\n# Display links\n\nPrismic provides link components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicNextLink field={slice.primary.my_link_field} />\n```\n\nSee the [`<PrismicNextLink>` documentation](https://prismic.io/docs/technical-reference/prismicio-next/v2.md#prismicnextlink) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicLink :field=\"slice.primary.my_link_field\" />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismic-vue/v4.md#prismiclink) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicLink field={slice.primary.my_link_field} />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismic-svelte/v0.md#prismiclink) to learn more.\n\nA repeatable link field can be displayed using a loop.\n\n**Next.js example:**\n\n```tsx\n<ul>\n  {slice.primary.my_link_field.map((link) => (\n    <li key={link?.text}>\n      <PrismicNextLink field={link} />\n    </li>\n  ))}\n</ul>\n```\n\n**Nuxt example:**\n\n```vue-html\n<ul>\n  <li v-for=\"link in slice.primary.my_link_field\">\n    <PrismicLink :field=\"link\" />\n  </li>\n</ul>\n```\n\n**SvelteKit example:**\n\n```svelte\n<ul>\n  {#each slice.primary.my_link_field as link}\n    <li><PrismicLink field={link} /></li>\n  {/each}\n</ul>\n```\n\n# Tips\n\n* **Use display text as labels**\n\n  The link's text label can be managed in Prismic when [display text](#optional-allow-display-text) is enabled. Prismic's link components automatically display the text.\n\n* **Use variants to style links**\n\n  [Link variants](#optional-allow-variants) can determine how links are styled. This example adds a CSS class based on the selected variant.\n\n  **Next.js example:**\n\n  ```tsx\n  <PrismicNextLink\n    field={slice.primary.button}\n    className={clsx(\"button\", {\n      primary: slice.primary.button.variant === \"Primary\",\n      secondary: slice.primary.button.variant === \"Secondary\",\n    })}\n  />\n  ```\n\n  This example uses [`clsx`](https://www.npmjs.com/package/clsx) to conditionally apply class names.\n\n  **Nuxt example:**\n\n  ```vue-html\n  <PrismicLink\n    :field=\"slice.primary.button\"\n    class=\"button\"\n    :class=\"{\n      primary: slice.primary.button.variant === 'Primary',\n      secondary: slice.primary.button.variant === 'Secondary',\n    }\"\n  />\n  ```\n\n  This example uses Vue's [`:class`](https://vuejs.org/guide/essentials/class-and-style) directive to conditionally apply class names.\n\n  **SvelteKit example:**\n\n  ```svelte\n  <PrismicLink\n    field={slice.primary.button}\n    class={[\n      \"button\",\n      {\n        primary: slice.primary.button.variant === \"Primary\",\n        secondary: slice.primary.button.variant === \"Secondary\",\n      },\n    ]}\n  />\n  ```\n\n  This example uses Svelte's [`class`](https://svelte.dev/docs/svelte/class) attribute to conditionally apply class names.\n\n* **Use `isFilled.link()` to check if a link field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismic/client\";\n\n  if (isFilled.link(slice.primary.button)) {\n    // Do something if `button` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a link field looks like from the Content API:\n\n```json\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\"\n  }\n}\n```\n\nA link configured to open in a new window includes a `target` property.\n\n```json {5}\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\",\n    \"target\": \"_blank\"\n  }\n}\n```\n\nA link that has display text or a variant includes a `text` or `variant` property.\n\n```json {5-6}\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Web\",\n    \"url\": \"https://prismic.io\",\n    \"text\": \"Click Here\",\n    \"variant\": \"Primary\"\n  }\n}\n```\n\nA repeatable link is returned as an array of links.\n\n```json\n{\n  \"example_link_to_media\": [\n    {\n      \"link_type\": \"Web\",\n      \"url\": \"https://prismic.io\"\n    },\n    {\n      \"link_type\": \"Web\",\n      \"url\": \"https://prismic.io/docs\"\n    }\n  ]\n}\n```\n\n\n### prismic.SelectField\n---\ntitle: \"Select\"\ndescription: \"This article explains what the select field is and how to configure it.\"\nmeta_title: \"Select\"\ncategory: \"fields\"\n---\n\nThe select field allows content writers to choose an option from a list of text options.\n\n# Add a select field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a select field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **select** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **Use first value as default** setting determines if the first option is selected by default. If this option is not checked, content writers can leave the field empty.\n\n3. **Define options**\n\n   Under the **Options** section, add as many options as needed.\n\n# Use select fields\n\nSelect fields can be used like a string in JavaScript.\n\n**Next.js example:**\n\n```tsx\n<p>My favorite fruit: {slice.primary.favorite_fruit}</p>\n```\n\n**Nuxt example:**\n\n```vue-html\n<p>My favorite fruit: {{ slice.primary.favorite_fruit }}</p>\n```\n\n**SvelteKit example:**\n\n```svelte\n<p>My favorite fruit: {slice.primary.favorite_fruit}</p>\n```\n\n# Tips\n\n* **Use `isFilled.select()` to check if a select field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.select(slice.primary.my_select_field)) {\n    // Do something if `my_select_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a select field looks like from the Content API:\n\n```json\n{\n  \"example_select\": \"My selected value\"\n}\n```\n\n\n### prismic.BooleanField\n---\ntitle: \"Boolean\"\ndescription: \"This article explains what the boolean field is and how to configure it.\"\nmeta_title: \"Boolean\"\ncategory: \"fields\"\n---\n\nThe boolean field allows content writers to select a `true` or `false` value. The field is displayed as a toggle in the [Page Builder](https://prismic.io/docs/guides/page-builder.md).\n\n# Add a boolean to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a boolean field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **boolean** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **(Optional) Set a default value**\n\n   By default, a boolean is set to `false`. It can default to `true` by checking the **Default to true** checkbox in the boolean's settings.\n\n4. **(Optional) Set custom labels**\n\n   A boolean can display custom labels for `true` and `false`. For example, you could set `true` to \"Yes\" and `false` to \"No.\"\n\n   Open the field settings and set custom labels in the **True Placeholder** and **False Placeholder** fields.\n\n   > Custom labels only change the text shown in the Page Builder. The API will always return `true` or `false`.\n\n# Use booleans\n\nBooleans can be used like a boolean in JavaScript.\n\nIn this example, \"Beta\" is displayed when the `is_beta` boolean is `true` and \"Production\" when it is `false`.\n\n**Next.js example:**\n\n```tsx\n// prettier-ignore\n{slice.primary.is_beta ? (\n  <span>Beta</span>\n) : (\n  <span>Production</span>\n)}\n```\n\n**Nuxt example:**\n\n```vue-html\n<span :v-if=\"slice.primary.is_beta\">Beta</span>\n<span :v-else>Production</span>\n```\n\n**SvelteKit example:**\n\n```svelte\n{#if slice.primary.is_beta}\n  <span>Beta</span>\n{:else}\n  <span>Production</span>\n{/if}\n```\n\n# API response\n\nHere is what a boolean looks like from the Content API:\n\n```json\n{\n  \"example_boolean\": true\n}\n```\n\n\n### prismic.NumberField\n---\ntitle: \"Number\"\ndescription: \"This article explains what the number field is and how to configure it.\"\nmeta_title: \"Number\"\ncategory: \"fields\"\n---\n\nThe number field allows content writers to provide a number. The number can be an integer (e.g. `3`) or a float (e.g. `3.14`).\n\n# Add a number field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a number field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **number** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use number fields\n\nNumber fields can be used like a number in JavaScript.\n\n**Next.js example:**\n\n```tsx\n<span>My age: {slice.primary.age}</span>\n```\n\n**Nuxt example:**\n\n```vue-html\n<span>My age: {{ slice.primary.age }}</span>\n```\n\n**SvelteKit example:**\n\n```svelte\n<span>My age: {slice.primary.age}</span>\n```\n\n# Tips\n\n* **Use `isFilled.number()` to check if a number field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.number(slice.primary.my_number_field)) {\n    // Do something if `my_number_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a number field looks like from the Content API:\n\n```json\n{\n  \"example_number\": 3.14\n}\n```\n\n\n### prismic.DateField\n---\ntitle: \"Date\"\ndescription: \"This article explains what the date field is and how to configure it.\"\nmeta_title: \"Date\"\ncategory: \"fields\"\n---\n\nThe date field allows content writers to select a date that represents a calendar day.\n\nThe date is saved in `YYYY-MM-DD` format, like <Code>{new Date().toLocaleDateString(\"en-CA\")}</Code>.\n\n> Unlike the [timestamp](https://prismic.io/docs/fields/timestamp.md) field, the date field does not include a time.\n\n# Add a date field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a date field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **date** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use date fields\n\nDate fields can be used anywhere a date is needed. It is often helpful to first convert the date to a JavaScript `Date` object using `asDate` from `@prismicio/client`.\n\n**Next.js example:**\n\n```tsx\nimport { asDate } from \"@prismicio/client\";\n\nfunction Slice() {\n  const date = asDate(slice.primary.release_date);\n\n  return <span>{date?.toLocaleDateString(\"en-US\")}</span>;\n}\n```\n\n**Nuxt example:**\n\n```vue\n<script>\nconst { asDate } = usePrismic();\n\nconst date = computed(() => asDate(slice.primary.release_date));\n</script>\n\n<template>\n  <span>{{ date?.toLocaleDateString(\"en-US\") }}</span>\n</template>\n```\n\n**SvelteKit example:**\n\n```svelte\n<script lang=\"ts\">\n  import { asDate } from \"@prismicio/client\";\n  import type { SliceComponentProps } from \"@prismicio/svelte\";\n\n  let { slice }: SliceComponentProps = $props();\n\n  let date = $derived(asDate(slice.primary.release_date));\n</script>\n\n<span>{date?.toLocaleDateString(\"en-US\")}</span>\n```\n\n# Tips\n\n* **Use `isFilled.date()` to check if a date field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.date(slice.primary.my_date_field)) {\n    // Do something if `my_date_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a date field looks like from the Content API:\n\n```json\n{\n  \"example_date\": \"2030-01-31\"\n}\n```\n\n\n### prismic.ColorField\n---\ntitle: \"Color\"\ndescription: \"This article explains what the color field is and how to configure it.\"\nmeta_title: \"Color\"\ncategory: \"fields\"\n---\n\nThe color field allows content writers to select a color. The field is displayed as a color picker in the [Page Builder](https://prismic.io/docs/guides/page-builder.md).\n\nThe color is saved as a hex value, like `#FFFFFF`.\n\n# Add a color field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a color field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **color** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use color fields\n\nColor fields can be used anywhere hex color values are supported.\n\nIn this example, the `text_color` field determines the `<span>`'s color.\n\n**Next.js example:**\n\n```tsx\n<span style={{ color: slice.primary.text_color }}>Hello!</span>\n```\n\n**Nuxt example:**\n\n```vue-html\n<span :style=\"{ color: slice.primary.text_color }\">Hello!</span>\n```\n\n**SvelteKit example:**\n\n```svelte\n<span style={`color: ${slice.primary.text_color}`}>Hello!</span>\n```\n\n# Tips\n\n* **Use `isFilled.color()` to check if a color field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.color(slice.primary.my_color_field)) {\n    // Do something if `my_color_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a color field looks like from the Content API:\n\n```json\n{\n  \"example_color\": \"#5B295F\"\n}\n```\n\n\n### prismic.EmbedField\n---\ntitle: \"Embed\"\ndescription: \"This article explains what the embed field is and how to configure it.\"\nmeta_title: \"Embed\"\ncategory: \"fields\"\n---\n\nThe embed field allows content writers to provide an [oEmbed](https://en.wikipedia.org/wiki/OEmbed) URL, like a YouTube video or a Spotify song.\n\nThe oEmbed URL's metadata and HTML content are available to developers.\n\n> **Important**\n>\n> Only embed HTML from trusted websites. See [this note](#embed-html-with-caution) below.\n\n# Add an embed field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add an embed field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **embed** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Display embed fields\n\nPrismic provides embed components for Nuxt and SvelteKit.\n\nIn Next.js, the standard [`dangerouslySetInnerHTML`](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html) React prop is used.\n\n**Next.js example:**\n\n```tsx\n<div dangerouslySetInnerHTML={{ __html: slice.primary.youtube_video.html }} />\n```\n\n**Nuxt example:**\n\n```vue-html\n<PrismicEmbed :field=\"slice.primary.youtube_video\" />\n```\n\n**SvelteKit example:**\n\n```svelte\n<PrismicEmbed field={slice.primary.youtube_video} />\n```\n\n# Tips\n\n* **Embed HTML with caution**\n\n  When using one of Prismic's embed compomnents or React's `dangerouslySetInnerHTML` prop, HTML from an embed field is directly injected into the page. Injecting external HTML makes your website vulnerable to [cross-site scripting (XSS)](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.\n\n  Only embed HTML from trusted sources.\n\n* **Style embeded content**\n\n  Apply a CSS class that targets child elements. This example displays a YouTube video at full width and with a 16:9 aspect ratio.\n\n  **Next.js example:**\n\n  ```tsx\n  <div\n    dangerouslySetInnerHTML={{ __html: slice.primary.youtube_video }}\n    className=\"youtube-video\"\n  />\n  ```\n\n  **Nuxt example:**\n\n  ```vue-html\n  <PrismicEmbed :field=\"slice.primary.youtube_video\" class=\"youtube-video\" />\n  ```\n\n  **SvelteKit example:**\n\n  ```svelte\n  <PrismicEmbed field={slice.primary.youtube_video} class=\"youtube-video\" />\n  ```\n\n  ```css filename=styles.css\n  .youtube-video {\n    width: 100%;\n  }\n\n  .youtube-video > iframe {\n    width: 100%;\n    aspect-ratio: 16 / 9;\n  }\n  ```\n\n* **Use `isFilled.embed()` to check if a embed field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.embed(slice.primary.my_embed_field)) {\n    // Do something if `my_embed_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a embed field looks like from the Content API:\n\n```json\n{\n  \"example_embed\": {\n    \"height\": 113,\n    \"width\": 200,\n    \"embed_url\": \"https://www.youtube.com/watch?v=GtuLg6hcV3w\",\n    \"type\": \"video\",\n    \"version\": \"1.0\",\n    \"title\": \"Prismic — Basics\",\n    \"author_name\": \"Prismic\",\n    \"author_url\": \"https://www.youtube.com/channel/UCJq6AEgtWeZt7ziQ-fLKOeA\",\n    \"provider_name\": \"YouTube\",\n    \"provider_url\": \"https://www.youtube.com/\",\n    \"cache_age\": null,\n    \"thumbnail_url\": \"https://i.ytimg.com/vi/GtuLg6hcV3w/hqdefault.jpg\",\n    \"thumbnail_width\": 480,\n    \"thumbnail_height\": 360,\n    \"html\": \"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/GtuLg6hcV3w?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\"\n  }\n}\n```\n\n\n### prismic.GeoPointField\n---\ntitle: \"Geopoint\"\ndescription: \"This article explains what the geopoint field is and how to configure it.\"\nmeta_title: \"Geopoint\"\ncategory: \"fields\"\n---\n\nThe geopoint field allows content writers to provide geolocation coordinates or a Google Maps URL.\n\n# Add a geopoint field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a geopoint field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **geopoint** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use geopoint fields\n\nThe geopoint field's longitude and latitude values can be read from the field's object.\n\nThis example uses a geopoint field named `location`.\n\n**Next.js example:**\n\n```tsx\n<span>\n  My location is {slice.primary.location.latitude},{\" \"}\n  {slice.primary.location.longitude}.\n</span>\n```\n\n**Nuxt example:**\n\n```vue-html\n<span>\n  My location is {{ slice.primary.location.latitude }},\n  {{ slice.primary.location.longitude }}.\n</span>\n```\n\n**SvelteKit example:**\n\n```svelte\n<span>\n  My location is {slice.primary.location.latitude}, {slice.primary.location\n    .longitude}.\n</span>\n```\n\n# Tips\n\n* **Use `isFilled.geoPoint()` to check if a geopoint field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.geoPoint(slice.primary.my_geopoint_field)) {\n    // Do something if `my_geopoint_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a geopoint field looks like from the Content API:\n\n```json\n{\n  \"example_geopoint\": {\n    \"latitude\": 20.632784250388028,\n    \"longitude\": 0.0019419193267822268\n  }\n}\n```\n\n\n### prismic.IntegrationField\n---\ntitle: \"Integration\"\ndescription: \"This article explains what the integration field is and how to configure it.\"\nmeta_title: \"Integration\"\ncategory: \"fields\"\n---\n\nThe integration field allows you to integrate third-party data into your repository, such as from e-commerce catalogs or custom APIs.\n\n> **Important**\n>\n> You can request access to this feature via [the Prismic Support Portal](https://prismic.atlassian.net/servicedesk/customer/portals).\n\n# Add an integration field to a content model\n\nUnlike other field types, integration fields cannot be added through [Slice Machine](https://prismic.io/docs/slice-machine.md). Instead, it must be added by editing your content model's JSON file.\n\n1. **Create a catalog**\n\n   See [Create an integration catalog](#create-an-integration-catalog) for instructions.\n\n2. **Open your content model's JSON file**\n\n   In your Prismic project, open the slice, page type, or custom type JSON file you want to modify. The file location depends on the content type:\n\n   * **Slices**: Typically in `src/slices/<name>/model.json`.\n   * **Page types**: `customtypes/<name>/index.json`.\n   * **Custom types**: `customtypes/<name>/index.json`.\n\n3. **Add an integration field**\n\n   Add a property to the content model's fields like the following. This example adds a `product` field to a \"Featured Product\" slice.\n\n   The **property name** (its API ID) determines the property name in the Content API. Use a short, snake-cased name.\n\n   The **label** property determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **catalog** property determines the data set connected to the integration field. For example, if your repository is called `lorem` and your catalog is called \"my store,\" the value will be: `\"lorem--my_store\"`.\n\n   ```json filename=src/slices/FeaturedProduct/model.json\n   // prettier-ignore\n   {\n     \"id\": \"featured_product\",\n     \"type\": \"SharedSlice\",\n     \"name\": \"FeaturedProduct\",\n     \"description\": \"FeaturedProduct\",\n     \"variations\": [\n       {\n         // ...\n         \"primary\": {\n           \"product\": { // [!code ++]\n             \"type\": \"IntegrationFields\", // [!code ++]\n             \"config\": { // [!code ++]\n               \"catalog\": \"example-prismic-repository--example_store\", // [!code ++]\n               \"label\": \"Product\" // [!code ++]\n             } // [!code ++]\n           }, // [!code ++]\n         },\n         // ...\n       }\n     ]\n   }\n   ```\n\n# Create an integration catalog\n\nThere are three ways you can integrate a third-party data source using an integration field:\n\n1. Pull data from an API.\n2. Push data to Prismic.\n3. Sync products from a [Shopify](https://www.shopify.com/) store.\n\n## Pull data from an API\n\nPrismic can pull data from your API periodically. Your API should return data in a specific format that the Prismic API understands.\n\n> Data is pulled every 30 minutes. This frequency may change in the future.\n\n1. **Create an API endpoint**\n\n   Your API endpoint should be accessible via the internet and return JSON in the following format.\n\n   ```ts\n   type Payload = {\n     results_size: number;\n     results: Array<{\n       id: string;\n       title: string;\n       description: string;\n       blob: object;\n       image_url?: string;\n       last_update?: number;\n     }>;\n   };\n   ```\n\n   | Property      | Type      | Description                        | Default |\n   | ------------- | --------- | ---------------------------------- | ------- |\n   | results\\_size | number    | The total number of items to pull. | None    |\n   | results       | object\\[] | An array of up to 50 items.        | None    |\n\n   If you have more than 50 items, `results_size` should be the total number of items. Prismic will call your endpoint multiple times, including a `page=<number>` URL parameter. Fill `results` with up to 50 items for each page.\n\n   Item objects should follow the following format:\n\n   | Property                | Type   | Description                                                                                                                                                                                                  | Default |\n   | ----------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------- |\n   | id                      | string | The item's unique ID. This property is not exposed through the Content API. To expose it, include it in the `blob` property.                                                                                 | None    |\n   | title                   | string | The item's title shown in the Page Builder.                                                                                                                                                                  | None    |\n   | description             | string | The item's description shown in the Page Builder.                                                                                                                                                            | None    |\n   | blob                    | object | The item's data. This is what appears in the Content API's response.                                                                                                                                         | None    |\n   | image\\_url (optional)   | string | The URL of the item's image thumbnail shown in the Page Builder.                                                                                                                                             | None    |\n   | last\\_update (optional) | number | The item's last updated timestamp in [Unix time](https://en.wikipedia.org/wiki/Unix_time) (e.g. `1509364426938`). Items are sorted from most recently updated to least recently updated in the Page Builder. | None    |\n\n   > Your API can optionally be secured using Basic HTTP authentication. See [Create a Custom API catalog](#create-a-custom-api-catalog) below.\n\n2. **Open your repository settings**\n\n   Navigate to your Prismic repository and go to **Settings** > **Integration Fields**.\n\n   You must be the repository owner or have admin rights to access the Integration Fields page.\n\n   > **Important**\n   >\n   > If you do not see the **Integration Fields** tab, request access via [the Prismic Support Portal](https://prismic.atlassian.net/servicedesk/customer/portals).\n\n3. **Create a Custom API catalog**\n\n   Select **Pull data from my endpoint** and fill out the fields.\n\n   The **Catalog Name** determines the API ID and the name displayed in your repository settings.\n\n   The **Description** is shown in your repository settings. Use a short description that will help organize your catalogs.\n\n   The **Endpoint** determines URL used to pull your data. The URL should output JSON in the specific format that the Prismic API understands.\n\n   The **Access token** is an optional way to authenticate your API using Basic HTTP authentication. The access token, along with a trailing colon (`:`), are sent encoded in an `Authorization` header when Prismic requests your API endpoint.\n\n   Click **Create my integration field** to save your catalog.\n\n4. **Pull your data**\n\n   Once the catalog is created, Prismic will begin its initial pull from your API and will periodically re-pull.\n\n   > Data is pulled every 30 minutes. This frequency may change in the future.\n\n## Push data to Prismic\n\nYou can push data to Prismic using a dedicated API endpoint. The endpoint allows for adding, updating, and deleting data.\n\n1. **Open your repository settings**\n\n   Navigate to your Prismic repository and go to **Settings** > **Integration Fields**.\n\n   You must be the repository owner or have admin rights to access the Integration Fields page.\n\n   > **Important**\n   >\n   > If you do not see the **Integration Fields** tab, request access via [the Prismic Support Portal](https://prismic.atlassian.net/servicedesk/customer/portals).\n\n2. **Create a Custom API catalog**\n\n   Select **Push data to Prismic** and fill out the fields.\n\n   The **Catalog Name** determines the API ID and the name displayed in your repository settings.\n\n   The **Description** is shown in your repository settings. Use a short description that will help organize your catalogs.\n\n   Click **Create my integration field** to save your catalog.\n\n3. **Get your API endpoint and token**\n\n   In your repository's Integration Fields settings, find your catalog. Click the **pencil icon** to view your catalog settings.\n\n   Your **API endpoint** is shown under the \"Endpoint\" field. You will use this endpoint to manage your data.\n\n   Your **API token** is shown in the \"Tokens\" section. You must include a token when sending API requests. You can create and revoke tokens from this section.\n\nOnce you have your API endpoint and token, you can push, update, and delete data.\n\n### Authorize requests\n\nAll requests to your API endpoint must include an `Authorization` header containing your API token:\n\n```http\nAuthorization: Bearer <your-api-token>\n```\n\n### Push items\n\nSend a `POST` request to your API endpoint containing your items. The request body should contain an array of items in JSON format:\n\n```ts\ntype Payload = Array<{\n  id: string;\n  title: string;\n  description: string;\n  blob: object;\n  image_url?: string;\n  last_update?: number;\n}>;\n```\n\n| Property                | Type   | Description                                                                                                                                                                                                  | Default |\n| ----------------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------- |\n| id                      | string | The item's unique ID. This property is not exposed through the Content API. To expose it, include it in the `blob` property.                                                                                 | None    |\n| title                   | string | The item's title shown in the Page Builder.                                                                                                                                                                  | None    |\n| description             | string | The item's description shown in the Page Builder.                                                                                                                                                            | None    |\n| blob                    | object | The item's data. This is what appears in the Content API's response.                                                                                                                                         | None    |\n| image\\_url (optional)   | string | The URL of the item's image thumbnail shown in the Page Builder.                                                                                                                                             | None    |\n| last\\_update (optional) | number | The item's last updated timestamp in [Unix time](https://en.wikipedia.org/wiki/Unix_time) (e.g. `1509364426938`). Items are sorted from most recently updated to least recently updated in the Page Builder. | None    |\n\n### Update items\n\nSend a `POST` request to your API endpoint containing your updated items. The request body should follow the same format as [pushing items](#push-items).\n\n### Delete items\n\nSend a `POST` request to the `/deleteItems` path of your API endpoint. For example:\n\n```plaintext\n// [!code word:deleteItems:1]\nhttps://if-api.prismic.io/if/write/example-prismic-repo--my_catalog/deleteItems\n```\n\nThe request body should contain an array of item IDs to delete in JSON format.\n\n### Delete all items\n\nSend a `POST` request to the `/reset` path of your API endpoint. For example:\n\n```plaintext\n// [!code word:reset]\nhttps://if-api.prismic.io/if/write/example-prismic-repo--my_catalog/reset\n```\n\nThe request body should be empty.\n\n> **Important**\n>\n> This operation cannot be undone. Use extreme caution when using the `/reset` endpoint.\n\n## Sync products from a Shopify store\n\nPrismic can automatically sync products from a [Shopify](https://www.shopify.com/) store.\n\n1. **Get your Shopify API credentials**\n\n   Follow the [Create and install a custom app](https://help.shopify.com/en/manual/apps/app-types/custom-apps#create-and-install-a-custom-app) instructions from the Shopify documentation.\n\n   > When selecting API scopes for the custom app, pick `read_products`.\n\n   Once your app is created and installed, follow the [Get the API credentials for a custom app](https://help.shopify.com/en/manual/apps/app-types/custom-apps#get-the-api-credentials-for-a-custom-app) instructions.\n\n   Hold on to your API credentials; you will need them when you register your Shopify store as a catalog.\n\n2. **Open your repository settings**\n\n   Navigate to your Prismic repository and go to **Settings** > **Integration Fields**.\n\n   You must be the repository owner or have admin rights to access the Integration Fields page.\n\n   > **Important**\n   >\n   > If you do not see the **Integration Fields** tab, request access via [the Prismic Support Portal](https://prismic.atlassian.net/servicedesk/customer/portals).\n\n3. **Create a Shopify catalog**\n\n   Select **Shopify** and fill out the fields.\n\n   The **Catalog Name** determines the name displayed in your repository settings.\n\n   The **Description** is shown in your repository settings. Use a short description that will help organize your catalogs.\n\n   The **Endpoint** should be your Shopify URL. For example: `example-store.myshopify.com`.\n\n   The **API key** should be your Shopify API key.\n\n   The **Password** should be your Shopify Admin API access token. **This token can only be viewed once on Shopify**.\n\n   The **Shared Secret** should be your Shopify secret key.\n\n   Click **Save** to save your catalog.\n\n4. **Pull your data**\n\n   Once the catalog is created, Prismic will begin its initial sync from your Shopify store and will periodically re-sync.\n\n# Use integration fields\n\nThe integration field's data can be read from the field's object.\n\nThis example uses an integration field named `featured_product`.\n\n**Next.js example:**\n\n```tsx\n<h1>Featured product: {slice.primary.featured_product.title}</h1>\n```\n\n**Nuxt example:**\n\n```vue-html\n<h1>Featured product: {{ slice.primary.featured_product.title }}</h1>\n```\n\n**SvelteKit example:**\n\n```svelte\n<h1>Featured product: {slice.primary.featured_product.title}</h1>\n```\n\n# Tips\n\n* **Use `isFilled.integrationField()` to check if an integration field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.integrationField(slice.primary.my_integration_field)) {\n    // Do something if `my_integration_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what an integration field looks like from the Content API:\n\n```json\n{\n  \"example_integration\": {\n    \"id\": 6562914664611,\n    \"handle\": \"organic-toast-golden\",\n    \"title\": \"Organic coffee blend\",\n    \"vendor\": \"Bare Blends\"\n  }\n}\n```\n\nThe field's content is determined by the item's `blob` property or Shopify product, depending on the type of catalog.\n\n\n### prismic.LinkToMediaField\n---\ntitle: \"Link to Media\"\ndescription: \"This article explains what the link to media field is and how to configure it.\"\nmeta_title: \"Link to Media\"\ncategory: \"fields\"\n---\n\nThe link to media field allows content writers to select media from a repository's media library. All media formats are supported, including images, videos, MP3s, GIFs, PDFs, and more.\n\n[Learn more about image management](https://prismic.io/docs/guides/manage-images.md)\n\n# Add a link to media field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a link to media field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **link to media** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **(Optional) Allow display text**\n\n   Links may need a text label, such as \"Download file\" or \"View full size.\" Content writers can provide a label when display text is allowed.\n\n   Open the field settings and check the **Allow display text** setting.\n\n4. **(Optional) Allow variants**\n\n   Links may need a specific visual style, like \"Primary\" or \"Secondary\" styling. Content writers can select from a list of styles you set when variants are enabled.\n\n   Open the field settings and enable variants under the **Variants** settings. Add as many variant options as needed.\n\n# Display links to media\n\nPrismic provides link components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicNextLink field={slice.primary.my_link_to_media_field} />\n```\n\nSee the [`<PrismicNextLink>` documentation](https://prismic.io/docs/technical-reference/prismicio-next/v2.md#prismicnextlink) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicLink :field=\"slice.primary.my_link_to_media_field\" />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v4.md#prismiclink) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicLink field={slice.primary.my_link_to_media_field} />\n```\n\nSee the [`<PrismicLink>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismiclink) to learn more.\n\n# Tips\n\n* **Use display text as labels**\n\n  The link to media's text label can be managed in Prismic when [display text](#optional-allow-display-text) is enabled. Prismic's link components automatically display the text.\n\n* **Use variants to style links**\n\n  [Link variants](#optional-allow-variants) can determine how links are styled. This example adds a CSS class based on the selected variant.\n\n  **Next.js example:**\n\n  ```tsx\n  <PrismicNextLink\n    field={slice.primary.related_media}\n    className={clsx(\"button\", {\n      primary: slice.primary.related_media.variant === \"Primary\",\n      secondary: slice.primary.related_media.variant === \"Secondary\",\n    })}\n  />\n  ```\n\n  This example uses [`clsx`](https://www.npmjs.com/package/clsx) to conditionally apply class names.\n\n  **Nuxt example:**\n\n  ```vue-html\n  <PrismicLink\n    :field=\"slice.primary.related_media\"\n    class=\"button\"\n    :class=\"{\n      primary: slice.primary.related_media.variant === 'Primary',\n      secondary: slice.primary.related_media.variant === 'Secondary',\n    }\"\n  />\n  ```\n\n  This example uses Vue's [`:class`](https://vuejs.org/guide/essentials/class-and-style) directive to conditionally apply class names.\n\n  **SvelteKit example:**\n\n  ```svelte\n  <PrismicLink\n    field={slice.primary.related_media}\n    class={[\n      \"button\",\n      {\n        primary: slice.primary.related_media.variant === \"Primary\",\n        secondary: slice.primary.related_media.variant === \"Secondary\",\n      },\n    ]}\n  />\n  ```\n\n  This example uses Svelte's [`class`](https://svelte.dev/docs/svelte/class) attribute to conditionally apply class names.\n\n* **Use `isFilled.linkToMedia()` to check if a link to media field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.linkToMedia(slice.primary.related_media)) {\n    // Do something if `related_media` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a link to media field looks like from the Content API:\n\n```json\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Media\",\n    \"id\": \"ZfA3AYUHT9oC73Ba\",\n    \"name\": \"mona-lisa\",\n    \"kind\": \"image\",\n    \"url\": \"https://images.prismic.io/example-prismic-repo/mona-lisa?auto=compress,format\",\n    \"size\": \"50\",\n    \"height\": \"500\",\n    \"width\": \"800\"\n  }\n}\n```\n\nWhen display text or variants are allowed, their values are set on the `text` and `variant` properties.\n\n```json {11-12}\n{\n  \"example_link_to_media\": {\n    \"link_type\": \"Media\",\n    \"id\": \"ZfA3AYUHT9oC73Ba\",\n    \"name\": \"mona-lisa\",\n    \"kind\": \"image\",\n    \"url\": \"https://images.prismic.io/example-prismic-repo/mona-lisa?auto=compress,format\",\n    \"size\": \"50\",\n    \"height\": \"500\",\n    \"width\": \"800\",\n    \"text\": \"Click here to see image\",\n    \"variant\": \"Primary\"\n  }\n}\n```\n\n\n### prismic.TableField\n---\ntitle: \"Table\"\ndescription: \"This article explains what the table field is and how to configure it.\"\ncategory: \"fields\"\n---\n\nThe table field allows content writers to create and manage tabular data. Content can be organized in rows and columns, ideal for specification sheets and documentation.\n\n> This field is not supported in the GraphQL API or Content API v1. Both APIs will return `null`.\n\n# Add a table field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models:\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a table field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **table** field.\n\n   The **label** determines the label shown to content writers in the Page Builder. Use an easily understandable name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Display tables\n\nPrismic provides table components for Next.js, Nuxt, and SvelteKit.\n\n**Next.js example:**\n\n```tsx\n<PrismicTable field={slice.primary.my_table_field} />\n```\n\nSee the [`<PrismicTable>` documentation](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictable) to learn more.\n\n**Nuxt example:**\n\n```vue-html\n<PrismicTable :field=\"slice.primary.my_table_field\" />\n```\n\nSee the [`<PrismicTable>` documentation](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictable) to learn more.\n\n**SvelteKit example:**\n\n```svelte\n<PrismicTable field={slice.primary.my_table_field} />\n```\n\nSee the [`<PrismicTable>` documentation](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictable) to learn more.\n\n# Tips\n\n* **Style tables**\n\n  Tables can be styled using CSS and a wrapper element.\n\n  * **Markup:**\n\n    **Next.js example:**\n\n    ```tsx\n    <div className=\"prismic-table\">\n      <PrismicTable field={slice.primary.my_table_field} />\n    </div>\n    ```\n\n    **Nuxt example:**\n\n    ```vue-html\n    <div class=\"prismic-table\">\n      <PrismicTable :field=\"slice.primary.my_table_field\" />\n    </div>\n    ```\n\n    **SvelteKit example:**\n\n    ```svelte\n    <div class=\"prismic-table\">\n      <PrismicTable field={slice.primary.my_table_field} />\n    </div>\n    ```\n\n  * **CSS:**\n\n    ```css\n    .prismic-table table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .prismic-table th,\n    .prismic-table td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n\n    .prismic-table th {\n      background-color: #f4f4f4;\n      font-weight: bold;\n    }\n    ```\n\n  > Tables can also be styled using custom components. [See below](#use-custom-ui-components).\n\n* **Use custom UI components**\n\n  Prismic's table components can render custom components for each block type.\n\n  **Next.js example:**\n\n  ```tsx {5-10}\n  import { Table } from \"@/components/Table\";\n\n  <PrismicTable\n    field={slice.primary.my_table_field}\n    components={{\n      // Use a component from another file.\n      table: ({ children }) => <Table>{children}</Table>,\n      // Use an HTML element with class names.\n      tbody: ({ children }) => <tbody className=\"my-tbody\">{children}</tbody>,\n    }}\n  />;\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-react/v3.md#prismictable)\n\n  **Nuxt example:**\n\n  ```vue-html {3-6}\n  <PrismicTable\n    :field=\"slice.primary.my_table_field\"\n    :components=\"{\n      table: Table,\n      tbody: TBody,\n    }\"\n  />\n  ```\n\n  ```vue filename=components/Table.vue\n  <template>\n    <table class=\"my-table\">\n      <slot />\n    </table>\n  </template>\n  ```\n\n  ```vue filename=components/TBody.vue\n  <template>\n    <tbody class=\"my-tbody\">\n      <slot />\n    </tbody>\n  </template>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-vue/v5.md#prismictable)\n\n  **SvelteKit example:**\n\n  ```svelte {8-11}\n  <script>\n    import { Table } from \"$lib/components/Table\";\n    import { TBody } from \"$lib/components/TBody\";\n  </script>\n\n  <PrismicTable\n    field={slice.primary.my_table_field}\n    components={{\n      table: Table,\n      tbody: TBody,\n    }}\n  />\n  ```\n\n  ```svelte filename=src/lib/components/Table.svelte\n  <script lang=\"ts\">\n    import type { Snippet } from \"svelte\";\n\n    type Props = { children: Snippet };\n\n    let { children }: Props = $props();\n  </script>\n\n  <table class=\"my-table\">\n    {@render children()}\n  </table>\n  ```\n\n  ```svelte filename=src/lib/components/TBody.svelte\n  <script lang=\"ts\">\n    import type { Snippet } from \"svelte\";\n\n    type Props = { children: Snippet };\n\n    let { children }: Props = $props();\n  </script>\n\n  <tbody class=\"my-tbody\">\n    {@render children()}\n  </tbody>\n  ```\n\n  [Learn more about the components prop](https://prismic.io/docs/technical-reference/prismicio-svelte/v2.md#prismictable)\n\n* **Use `isFilled.table()` to check if a table field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.table(slice.primary.my_table_field)) {\n    // Do something if `my_table_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a table field looks like from the Content API:\n\n```json\n{\n  \"example_table\": {\n    \"head\": [\n      {\n        \"cells\": [\n          {\n            \"type\": \"header\",\n            \"content\": [{ \"type\": \"paragraph\", \"text\": \"GET\", \"spans\": [] }]\n          },\n          {\n            \"type\": \"header\",\n            \"content\": [{ \"type\": \"paragraph\", \"text\": \"DELETE\", \"spans\": [] }]\n          }\n        ]\n      }\n    ]\n    \"body\": [\n      {\n        \"cells\": [\n          {\n            \"type\": \"data\",\n            \"content\": [\n              {\n                \"type\": \"paragraph\",\n                \"text\": \"For basic retrieval of information...\",\n                \"spans\": []\n              }\n            ]\n          },\n          {\n            \"type\": \"data\",\n            \"content\": [\n              {\n                \"type\": \"paragraph\",\n                \"text\": \"To destroy a resource and remove...\",\n                \"spans\": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nPrismic returns a JSON representation of the field's formatted content. Prismic's [table component](#display-tables) is the best way to display the JSON content.\n\n\n### prismic.KeyTextField\n---\ntitle: \"Text\"\ndescription: \"This article explains what the text field is and how to configure it.\"\nmeta_title: \"Text\"\ncategory: \"fields\"\n---\n\nThe text field allows content writers to provide plain text.\n\n> The text field and [rich text field](https://prismic.io/docs/fields/rich-text.md) look similar. Use the text field for simple text that does not require formatting. Use the rich text field for text that requires formatting.\n\n# Add a text field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a text field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **text** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use text fields\n\nText fields can be used like a string in JavaScript.\n\n**Next.js example:**\n\n```tsx\n<p>My name: {slice.primary.name}</p>\n```\n\n**Nuxt example:**\n\n```vue-html\n<p>My name: {{ slice.primary.name }}</p>\n```\n\n**SvelteKit example:**\n\n```svelte\n<p>My name: {slice.primary.name}</p>\n```\n\n# Tips\n\n* **Use `isFilled.keyText()` to check if a text field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.keyText(slice.primary.my_text_field)) {\n    // Do something if `my_text_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a text field looks like from the Content API:\n\n```json\n{\n  \"example_text\": \"Lorem ipsum\"\n}\n```\n\n\n### prismic.TimestampField\n---\ntitle: \"Timestamp\"\ndescription: \"This article explains what the timestamp field is and how to configure it.\"\nmeta_title: \"Timestamp\"\ncategory: \"fields\"\n---\n\nThe timestamp field allows content writers to select a date and time.\n\nThe timestamp is saved in `YYYY-MM-DDTHH:MM:SS+0000` format, like <Code>{new Date().toISOString().replace(/\\.\\d{3}/, '').replace('Z', '+0000')}</Code>. The timestamp is always [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) (`+0` offset).\n\n> Unlike the [date](https://prismic.io/docs/fields/date.md) field, the timestamp field includes a time.\n\n# Add a timestamp field to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a timestamp field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **timestamp** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n# Use timestamp fields\n\nTimestamp fields can be used anywhere a timestamp is needed. It is often helpful to first convert the timestamp to a JavaScript `Date` object using `asDate` from `@prismicio/client`.\n\n**Next.js example:**\n\n```tsx\nimport { asDate } from \"@prismicio/client\";\n\nfunction Slice() {\n  const timestamp = asDate(slice.primary.release_timestamp);\n\n  return <span>{timestamp?.toLocaleDateString(\"en-US\")}</span>;\n}\n```\n\n**Nuxt example:**\n\n```vue\n<script>\nconst { asDate } = usePrismic();\n\nconst timestamp = computed(() => asDate(slice.primary.release_timestamp));\n</script>\n\n<template>\n  <span>{{ timestamp?.toLocaleDateString(\"en-US\") }}</span>\n</template>\n```\n\n**SvelteKit example:**\n\n```svelte\n<script lang=\"ts\">\n  import { asDate } from \"@prismicio/client\";\n  import type { SliceComponentProps } from \"@prismicio/svelte\";\n\n  let { slice }: SliceComponentProps = $props();\n\n  let timestamp = $derived(asDate(slice.primary.release_timestamp));\n</script>\n\n<span>{timestamp?.toLocaleDateString(\"en-US\")}</span>\n```\n\n# Tips\n\n* **Use `isFilled.timestamp()` to check if a timestamp field has a value**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.timestamp(slice.primary.my_timestamp_field)) {\n    // Do something if `my_timestamp_field` has a value.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a timestamp field looks like from the Content API:\n\n```json\n{\n  \"example_timestamp\": \"2030-01-31:05:00:00+0000\"\n}\n```\n\n\n### prismic.GroupField\n---\ntitle: \"Repeatable group\"\ndescription: \"This article explains what the repeatable group is and how to configure it.\"\nmeta_title: \"Repeatable group\"\ncategory: \"fields\"\n---\n\nA repeatable group is used to create a repeatable collection of fields. It can be used to create an image gallery, a list of products, a navigation list, and more.\n\n> A repeatable group cannot contain another repeatable group.\n\n# Add a repeatable group to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a repeatable group**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **repeatable group**.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **Add fields**\n\n   For each field needed in the repeatable group, click the **Add a field** button and select a field. All field types are supported.\n\n4. **(Optional) Make the repeatable group non-repeatable**\n\n   A repeatable group can be configured as non-repeatable, visually grouping fields in the Page Builder while preventing content writers from repeating them.\n\n   Open the repeatable group settings and uncheck the **Repeatable** setting.\n\n# Use repeatable groups\n\nA repeatable group can be displayed using a loop.\n\nThis example uses a repeatable group named `my_repeatable_group` containing a text field named `feature`.\n\n**Next.js example:**\n\n```tsx\n<ul>\n  {slice.primary.my_repeatable_group.map((item) => (\n    <li>{item.feature}</li>\n  ))}\n</ul>\n```\n\n**Nuxt example:**\n\n```vue-html\n<ul>\n  <li v-for=\"item in slice.primary.my_repeatable_group\">\n    {{ item.feature }}\n  </li>\n</ul>\n```\n\n**SvelteKit example:**\n\n```svelte\n<ul>\n  {#each slice.primary.my_repeatable_group as item}\n    <li>{item.feature}</li>\n  {/each}\n</ul>\n```\n\nRepeatable groups that are [non-repeatable](#optional-make-the-repeatable-group-non-repeatable) should access their fields using `[0]`:\n\n```ts\nconst group = slice.primary.my_repeatable_group[0];\n```\n\n# Tips\n\n* **Use `isFilled.group()` to check if a repeatable group has items**\n\n  ```ts\n  import { isFilled } from \"@prismicio/client\";\n\n  if (isFilled.group(slice.primary.my_group)) {\n    // Do something if `my_group` has items.\n  }\n  ```\n\n  [Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# API response\n\nHere is what a repeatable group looks like from the Content API:\n\n```json\n{\n  \"example_repeatable_group\": [\n    {\n      \"description\": \"Carrot\",\n      \"price\": 55\n    },\n    {\n      \"description\": \"Apple\",\n      \"price\": 60\n    }\n  ]\n}\n```\n\nThe repeatable field's content is determined by its fields.\n\nA non-repeatable group returns a single-element array.\n\n```json\n{\n  \"example_repeatable_group\": [\n    {\n      \"description\": \"Carrot\",\n      \"price\": 55\n    }\n  ]\n}\n```\n\n\n### prismic.ContentRelationshipField\n---\ntitle: \"Content Relationship\"\ndescription: \"This article explains what the content relationship field is and how to configure it.\"\nmeta_title: \"Content Relationship\"\ncategory: \"fields\"\n---\n\nContent writers can link pages through content relationship fields. Developers can then access content from those pages.\n\nContent relationship fields are often used for:\n\n* Connecting a blog post to its **author**.\n* Displaying a **testimonial** on a landing page.\n* Linking a product to its **category**.\n\n> The [link field](https://prismic.io/docs/fields/link.md) and the content relationship field look similar. Link fields should be used to create web links, like a \"Learn More\" link. Content relationship fields should be used to create data structures, like a blog post pointing to its author.\n\n# Add a content relationship to a content model\n\n1. **Open Slice Machine**\n\n   In your Prismic project, start Slice Machine to begin editing content models.\n\n   ```sh\n   npx start-slicemachine --open\n   ```\n\n2. **Add a content relationship field**\n\n   In Slice Machine, navigate to the slice, page type, or custom type you want to modify. Add a **content relationship** field.\n\n   The **label** determines the label shown to content writers in the [Page Builder](https://prismic.io/docs/guides/page-builder.md). Use an easily understood name.\n\n   The **API ID** determines the property name in the Content API. Use a short, snake-cased name.\n\n3. **Select the allowed page type**\n\n   You can restrict the field to a specific page type. For example, you can configure the field to only allow Author pages in an Author field.\n\n   In the field's settings, click the **Add type** button to select a page type.\n\n   You'll be able to select fields from that page type to include in the API response in the next step.\n\n4. **Select the fields to fetch**\n\n   If you restrict the field to [a specific page type](#select-the-allowed-page-type), you can select which fields to include in the API response.\n\n   Under the **Allowed type** section, use the field picker to choose which fields should be included. Up to 2 levels of nested fields can be selected (e.g. `blog` -> `author` -> `profession`).\n\n   The selected fields are included in Slice Machine's generated TypeScript types.\n\n   > **Important**\n   >\n   > Slice Zone fields cannot be fetched from content relationships.\n\n# Display content relationships\n\nContent from a related page can be displayed like any other field. The name of a blog post's author, for example, can be rendered using the `<PrismicText>` component.\n\n[See the fields page](https://prismic.io/docs/fields.md)\n\nBefore accessing nested content, use [`isFilled.contentRelationship()`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled) to ensure the relationship has a page.\n\n**Next.js example:**\n\n```tsx\n{\n  isFilled.contentRelationship(post.data.author) && (\n    <p>\n      Written by <PrismicText field={post.data.author.data?.name} />,\n      {isFilled.contentRelationship(post.data.author.data?.profession) && (\n        <PrismicText field={post.data.author.data.profession?.data.name} />\n      )}\n    </p>\n  );\n}\n```\n\n**Nuxt example:**\n\n```vue-html\n<p v-if=\"$prismic.isFilled.contentRelationship(post.data.author)\">\n  Written by <PrismicText :field=\"post.data.author.data?.name\" />,\n  <template v-if=\"$prismic.isFilled.contentRelationship(post.data.author.data?.profession)\">\n    <PrismicText :field=\"post.data.author.data?.profession?.data.name\" />\n  </template>\n</p>\n```\n\n**SvelteKit example:**\n\n```svelte\n{#if isFilled.contentRelationship(post.data.author)}\n  <p>\n    Written by <PrismicText field={post.data.author.data?.name} />,\n    {#if isFilled.contentRelationship(post.data.author.data?.profession)}\n      <PrismicText field={post.data.author.data?.profession?.data.name} />\n    {/if}\n  </p>\n{/if}\n```\n\n[Learn more about `isFilled`](https://prismic.io/docs/technical-reference/prismicio-client/v7.md#isfilled)\n\n# Examples\n\n## Blog post authors\n\nOn a blog, you could have posts that reference their authors along with the author's profession.\n\n1. **Add a content relationship field**\n\n   On a Post type, add a content relationship field called `author`. Only allow linking Author pages on the content relationship.\n\n2. **Select fields to include**\n\n   Select the following fields to include in your API response:\n\n   * `name`\n   * `profession.name`\n\n3. **Display the author information**\n\n   Use the author data in your blog post to display the author's name and profession.\n\n   **Next.js example:**\n\n   ```tsx\n   {\n     isFilled.contentRelationship(post.data.author) && (\n       <p>\n         Written by <PrismicText field={post.data.author.data?.name} />,\n         {isFilled.contentRelationship(post.data.author.data?.profession) && (\n           <PrismicText field={post.data.author.data.profession?.data.name} />\n         )}\n       </p>\n     );\n   }\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html\n   <p v-if=\"$prismic.isFilled.contentRelationship(post.data.author)\">\n     Written by <PrismicText :field=\"post.data.author.data?.name\" />,\n     <template v-if=\"$prismic.isFilled.contentRelationship(post.data.author.data?.profession)\">\n       <PrismicText :field=\"post.data.author.data?.profession?.data.name\" />\n     </template>\n   </p>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte\n   {#if isFilled.contentRelationship(post.data.author)}\n     <p>\n       Written by <PrismicText field={post.data.author.data?.name} />,\n       {#if isFilled.contentRelationship(post.data.author.data?.profession)}\n         <PrismicText field={post.data.author.data?.profession?.data.name} />\n       {/if}\n     </p>\n   {/if}\n   ```\n\n## Landing page testimonials\n\nOn a landing page, you could feature testimonials from your customers or clients.\n\n1. **Add a content relationship field**\n\n   On a Landing Page type, add a group field called `testimonials` containing a content relationship field. Only allow linking Testimonial pages on the content relationship.\n\n2. **Select fields to include**\n\n   Select the following fields to include in your API response:\n\n   * `quote`\n   * `avatar`\n\n3. **Display the testimonials**\n\n   Use the testimonial data in your landing page to display quotes with avatars.\n\n   **Next.js example:**\n\n   ```tsx\n   <ul>\n     {page.data.testimonials.map(\n       (item) =>\n         isFilled.contentRelationship(item.testimonial) && (\n           <li key={item.testimonial.id}>\n             <PrismicNextImage field={item.testimonial.data?.avatar} />\n             <PrismicRichText field={item.testimonial.data?.quote} />\n           </li>\n         ),\n     )}\n   </ul>\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html\n   <ul>\n     <template v-for=\"(item) in page.data.testimonials\">\n       <li\n         v-if=\"$prismic.isFilled.contentRelationship(item)\"\n         :key=\"item.testimonial.id\"\n       >\n         <PrismicImage :field=\"item.testimonial.data?.avatar\" />\n         <PrismicRichText :field=\"item.testimonial.data?.quote\" />\n       </li>\n     </template>\n   </ul>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte\n   <ul>\n     {#each page.data.testimonials as item}\n       {#if isFilled.contentRelationship(item.testimonial)}\n         <li>\n           <PrismicImage field={item.testimonial.data?.avatar} />\n           <PrismicRichText field={item.testimonial.data?.quote} />\n         </li>\n       {/if}\n     {/each}\n   </ul>\n   ```\n\n## Taxonomies\n\nOn a blog, you could organize posts by categories.\n\n1. **Create a Category custom type**\n\n   This type will represent blog post categories. It should be repeatable and have a **Name** field.\n\n2. **Add a content relationship field**\n\n   On a Post type, add a content relationship field called `category`. Only allow linking Category pages on the content relationship.\n\n3. **Select fields to include**\n\n   Select the following fields to include in your API response:\n\n   * `name`\n\n4. **Display the category**\n\n   Use the category data in your blog post to display the post's category.\n\n   **Next.js example:**\n\n   ```tsx\n   {\n     isFilled.contentRelationship(post.data.category) && (\n       <span>{post.data.category.data?.name}</span>\n     );\n   }\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html\n   <span v-if=\"$prismic.isFilled.contentRelationship(post.data.category)\">\n     {{ post.data.category.data?.name }}\n   </span>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte\n   {#if isFilled.contentRelationship(post.data.category)}\n     <span>{post.data.category.data?.name}</span>\n   {/if}\n   ```\n\n5. **Create a category page**\n\n   In your API query, use the `filters` option to query all blog posts for a category.\n\n   This example fetches all blog posts from a category with the page ID `YksUgRIAACEA-UZD`:\n\n   ```ts {4}\n   import { filter } from \"@prismicio/client\";\n\n   const posts = await client.getAllByType(\"post\", {\n     filters: [filter.at(\"my.post.category\", \"YksUgRIAACEA-UZD\")],\n   });\n   ```\n\n## Nested menus\n\nOn a website, you could build a nested navigation menu.\n\n1. **Create a Child Menu custom type**\n\n   This type will represent a list of links. It should be repeatable and have a group field called `links` containing a link field and an icon field.\n\n2. **Create a Menu custom type**\n\n   This type will represent top-level lists of links. It should be a singleton and have a group field called `child_menus` containing a content relationship field. The content relationship should only allow linking to Child Menu pages.\n\n3. **Select fields to include**\n\n   Select the following fields to include in your API response:\n\n   * `links.link`\n   * `links.icon`\n\n4. **Display the menu**\n\n   Use the menu data to render your navigation with proper field checking.\n\n   **Next.js example:**\n\n   ```tsx\n   <ul>\n     {menu.data.child_menus.map(\n       (item) =>\n         isFilled.contentRelationship(item) && (\n           <li key={item.child_menu.id}>\n             <ul>\n               {item.child_menu.data?.links.map(\n                 (linkItem) =>\n                   isFilled.link(linkItem.link) && (\n                     <li key={linkItem.link.url}>\n                       <PrismicNextImage field={linkItem.icon} />\n                       <PrismicNextLink field={linkItem.link} />\n                     </li>\n                   ),\n               )}\n             </ul>\n           </li>\n         ),\n     )}\n   </ul>\n   ```\n\n   **Nuxt example:**\n\n   ```vue-html\n   <ul>\n     <template v-for=\"item in menu.data.child_menus\">\n       <li v-if=\"$prismic.isFilled.contentRelationship(item)\" :key=\"item.id\">\n         <ul>\n           <template v-for=\"linkItem in item.child_menu.data?.links\">\n             <li v-if=\"$prismic.isFilled.link(linkItem.link)\" :key=\"linkItem.link.url\">\n               <PrismicImage :field=\"linkItem.icon\" />\n               <PrismicLink :field=\"linkItem.link\" />\n             </li>\n           </template>\n         </ul>\n       </li>\n     </template>\n   </ul>\n   ```\n\n   **SvelteKit example:**\n\n   ```svelte\n   <ul>\n     {#each menu.data.child_menus as item}\n       {#if isFilled.contentRelationship(item.child_menu)}\n         <li>\n           <ul>\n             {#each item.child_menu.data?.links as linkItem}\n               {#if isFilled.link(linkItem.link)}\n                 <li>\n                   <PrismicImage field={linkItem.icon} />\n                   <PrismicLink field={linkItem.link} />\n                 </li>\n               {/if}\n             {/each}\n           </ul>\n         </li>\n       {/if}\n     {/each}\n   </ul>\n   ```\n\n# API response\n\nHere is what a content relationship looks like from the Content API:\n\n```json\n{\n  \"author\": {\n    \"id\": \"XxnD3REAACYAk_CJ\",\n    \"type\": \"author\",\n    \"tags\": [],\n    \"slug\": \"ada-lovelace\",\n    \"lang\": \"en-us\",\n    \"uid\": \"ada-lovelace\",\n    \"data\": {\n      \"name\": [\n        {\n          \"type\": \"paragraph\",\n          \"text\": \"Ada Lovelace\",\n          \"spans\": []\n        }\n      ],\n      \"profession\": {\n        \"id\": \"ZpqX7SFJJKEBl_VK\",\n        \"type\": \"profession\",\n        \"tags\": [],\n        \"slug\": \"mathematician\",\n        \"lang\": \"en-us\",\n        \"uid\": \"mathematician\",\n        \"data\": {\n          \"name\": [\n            {\n              \"type\": \"paragraph\",\n              \"text\": \"Mathematician\",\n              \"spans\": []\n            }\n          ]\n        },\n        \"link_type\": \"Document\",\n        \"isBroken\": false\n      }\n    },\n    \"link_type\": \"Document\",\n    \"isBroken\": false\n  }\n}\n```\n\nThe `data` property's contents is determined by the [selected fields](#select-the-fields-to-fetch).\n\nWhen a selected field is deleted, it's automatically removed from the API response.\n\n# GraphQuery (Legacy)\n\nGraphQuery is a legacy API option that allows selective fetching (specific fields only) and deep fetching (fields from linked pages). This feature is maintained for existing users but is not recommended for new projects.\n\n> **Caution**\n>\n> Fetch linked content using [field selection](#select-the-fields-to-fetch) in new projects.\n\n## Basic Usage\n\nGraphQuery uses GraphQL-like syntax. The top-level property represents a page type and its children represent its fields.\n\nPass the GraphQuery to the Prismic client's `graphQuery` option.\n\n```ts\nconst blogPost = await client.getByUID(\"blog_post\", \"my-first-post\", {\n  graphQuery: `\n    {\n      blog_post {\n        title\n        description\n      }\n    }\n  `,\n});\n```\n\nThis example fetches the `title` and `description` fields from blog posts.\n\n## Arrays\n\nFields from an array of objects can be selected. Repeatable groups, slice zones, and queries for multiple pages return arrays.\n\n```ts\nconst blogPost = await client.getByUID(\"blog_post\", \"my-first-post\", {\n  graphQuery: `\n    {\n      blog_post {\n        title\n        gallery {\n          photo\n          caption\n        }\n      }\n    }\n  `,\n});\n```\n\nThis example fetches the `gallery` group array with its `photo` and `caption` fields from blog posts.\n\n## Unions\n\nUse unions for content that can return multiple kinds of content, like slices, slice variations, or linked pages.\n\nEach kind of content should be listed with desired the fields. Prepend the API ID with `...on`:\n\n```ts\n// Linked pages\nconst blogPost = await client.getByUID(\"blog_post\", \"my-first-post\", {\n  graphQuery: `\n    {\n      blog_post {\n        author_link {\n          ...on author {\n            name\n            bio\n          }\n        }\n      }\n    }\n  `,\n});\n\n// Slices\nconst page = await client.getByUID(\"page\", \"my-page\", {\n  graphQuery: `\n    {\n      page {\n        slices {\n          ...on text_block {\n            primary {\n              title\n            }\n          }\n          ...on image_gallery {\n            items {\n              image\n            }\n          }\n        }\n      }\n    }\n  `,\n});\n```\n\nThis example fetches a the `name` and `bio` fields from a blog post's author. It also fetches fields from the `text_block` and `image_gallery` slices.\n\n## Spread Operator\n\nSelect all fields from a set using the spread operator with `...` and `Fields`:\n\n```ts\nconst blogPost = await client.getByUID(\"blog_post\", \"my-first-post\", {\n  graphQuery: `\n    {\n      blog_post {\n        ...blog_postFields\n        author_link {\n          ...on author {\n            ...authorFields\n          }\n        }\n      }\n    }\n  `,\n});\n```\n\nThis example fetches all fields from the blog post and all fields from the blog post's author.\n\n## TypeScript Support\n\nType fetched fields using [type assertion](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions) (the `as` operator).\n\n```typescript\nimport { Content } from \"@prismicio/client\";\n\nconst featuredBlogPost = home.data\n  .featured_blog_post as typeof home.data.featured_blog_post & {\n  data: Pick<Content.BlogPostDocument[\"data\"], \"title\" | \"description\">;\n};\n\nconst title = featuredBlogPost.data.title;\n//    ^ Typed as Content.BlogPostDocument['data']['title']\n```\n\n\n## Next Steps\nImplement the desired code changes following the documentation above and project patterns."
    }
  ]
}